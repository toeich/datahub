package de.jworks.datahub.presentation.editors;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.event.Action;
import com.vaadin.event.Action.Handler;
import com.vaadin.event.DataBoundTransferable;
import com.vaadin.event.dd.DragAndDropEvent;
import com.vaadin.event.dd.DropHandler;
import com.vaadin.event.dd.acceptcriteria.AcceptCriterion;
import com.vaadin.event.dd.acceptcriteria.ServerSideCriterion;
import com.vaadin.shared.ui.dd.VerticalDropLocation;
import com.vaadin.ui.AbstractSelect.ItemCaptionMode;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Panel;
import com.vaadin.ui.Tree;
import com.vaadin.ui.Tree.TreeDragMode;
import com.vaadin.ui.Tree.TreeTargetDetails;
import com.vaadin.ui.VerticalLayout;

import de.jworks.datahub.business.datasets.entity.Attribute;
import de.jworks.datahub.business.datasets.entity.DatasetSchema;
import de.jworks.datahub.business.datasets.entity.Element;
import de.jworks.datahub.business.datasets.entity.Item;
import de.jworks.datahub.presentation.data.DocumentSchemaContainer;

public class DocumentSchemaEditor extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private HorizontalLayout mainLayout;
	@AutoGenerated
	private Panel detailsPanel;
	@AutoGenerated
	private VerticalLayout detailsLayout;
	@AutoGenerated
	private Panel masterPanel;
	@AutoGenerated
	private VerticalLayout masterLayout;
	@AutoGenerated
	private Tree schemaTree;
	
	
	public DocumentSchemaEditor() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
	}
	
	public void setDocumentSchema(DatasetSchema documentSchema) {
		schemaTree.setContainerDataSource(new DocumentSchemaContainer(documentSchema));

		schemaTree.setItemCaptionMode(ItemCaptionMode.PROPERTY);
		schemaTree.setItemCaptionPropertyId("name");
		
		schemaTree.addActionHandler(new Handler() {
			
			private Action addElement = new Action("Add Element");
			
			private Action addAttribute = new Action("Add Attribute");
			
			private Action delete = new Action("Delete");
			
			@Override
			public Action[] getActions(Object target, Object sender) {
				if (target instanceof Element) {
					return ((Element) target).getParent() == null
						? new Action[] { addElement, addAttribute }
						: new Action[] { addElement, addAttribute, delete };
				}
				if (target instanceof Attribute) {
					return new Action[] { delete };
				}
				return null;
			}

			@Override
			public void handleAction(Action action, Object sender, Object target) {
				if (action == addElement) {
					((Element) target).addElement("new element");
				} else if (action == addAttribute) {
					((Element) target).addAttribute("new attribute");
				} else if (action == delete) {
					DocumentSchemaContainer container = (DocumentSchemaContainer) ((Tree) sender).getContainerDataSource();
					Object parentItemId = container.getParent(target);
					if (parentItemId instanceof Element) {
						if (target instanceof Element) {
							((Element) parentItemId).removeElement((Element) target);
						} else if (target instanceof Attribute) {
							((Element) parentItemId).removeAttribute((Item) target);
						}
					}
				}
				((Tree) sender).markAsDirtyRecursive();
			}
			
		});
		
		schemaTree.setDragMode(TreeDragMode.NODE);
		schemaTree.setDropHandler(new DropHandler() {
			
			@Override
			public AcceptCriterion getAcceptCriterion() {
				return new ServerSideCriterion() {
					@Override
					public boolean accept(DragAndDropEvent dragEvent) {
						try {
							DataBoundTransferable transferable = (DataBoundTransferable) dragEvent.getTransferable();
							TreeTargetDetails targetDetails = (TreeTargetDetails) dragEvent.getTargetDetails();
							
							if (targetDetails.getItemIdInto() == null) {
								return false;
							}
							
							if (targetDetails.getItemIdOver() == transferable.getItemId()) {
								return false;
							}
							
							if (transferable.getItemId() instanceof Element) {
								if (targetDetails.getItemIdOver() instanceof Element) {
									Element e = (Element) targetDetails.getItemIdOver();
									while (e != null) {
										if (e == transferable.getItemId()) {
											return false;
										}
										e = e.getParent();
									}
									return true;
								}
							}
							
							if (transferable.getItemId() instanceof Attribute) {
								if (targetDetails.getItemIdOver() instanceof Element) {
									if (targetDetails.getItemIdAfter() instanceof Element) {
										return false;
									}
									return true;
								}
								if (targetDetails.getItemIdOver() instanceof Attribute) {
									if (targetDetails.getDropLocation() != VerticalDropLocation.MIDDLE) {
										return true;
									}
								}
							}
						} catch (Exception e) {
							e.printStackTrace();
						}
						
						return false;
					}
				};
			}
			
			@Override
			public void drop(DragAndDropEvent event) {
				// TODO Auto-generated method stub
				
			}
			
		});

		schemaTree.setImmediate(true);
		schemaTree.addValueChangeListener(new ValueChangeListener() {
			@Override
			public void valueChange(ValueChangeEvent event) {
				Object itemId = event.getProperty().getValue();
				if (itemId instanceof Element) {
					detailsPanel.setContent(new ElementEditor((Element) itemId));
				} else if (itemId instanceof Attribute) {
					detailsPanel.setContent(new AttributeEditor((Attribute) itemId));
				} else {
					detailsPanel.setContent(null);
				}
			}
		});

		schemaTree.setNullSelectionAllowed(false);
		
		schemaTree.expandItemsRecursively(documentSchema.getRootElement());
		schemaTree.select(documentSchema.getRootElement());
	}

	@AutoGenerated
	private HorizontalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// masterPanel
		masterPanel = buildMasterPanel();
		mainLayout.addComponent(masterPanel);
		
		// detailsPanel
		detailsPanel = buildDetailsPanel();
		mainLayout.addComponent(detailsPanel);
		mainLayout.setExpandRatio(detailsPanel, 1.0f);
		
		return mainLayout;
	}

	@AutoGenerated
	private Panel buildMasterPanel() {
		// common part: create layout
		masterPanel = new Panel();
		masterPanel.setImmediate(false);
		masterPanel.setWidth("300px");
		masterPanel.setHeight("100.0%");
		
		// masterLayout
		masterLayout = buildMasterLayout();
		masterPanel.setContent(masterLayout);
		
		return masterPanel;
	}

	@AutoGenerated
	private VerticalLayout buildMasterLayout() {
		// common part: create layout
		masterLayout = new VerticalLayout();
		masterLayout.setImmediate(false);
		masterLayout.setWidth("100.0%");
		masterLayout.setHeight("100.0%");
		masterLayout.setMargin(false);
		
		// schemaTree
		schemaTree = new Tree();
		schemaTree.setStyleName("borderless");
		schemaTree.setImmediate(false);
		schemaTree.setWidth("100.0%");
		schemaTree.setHeight("100.0%");
		masterLayout.addComponent(schemaTree);
		masterLayout.setExpandRatio(schemaTree, 1.0f);
		
		return masterLayout;
	}

	@AutoGenerated
	private Panel buildDetailsPanel() {
		// common part: create layout
		detailsPanel = new Panel();
		detailsPanel.setStyleName("light");
		detailsPanel.setImmediate(false);
		detailsPanel.setWidth("100.0%");
		detailsPanel.setHeight("100.0%");
		
		// detailsLayout
		detailsLayout = new VerticalLayout();
		detailsLayout.setImmediate(false);
		detailsLayout.setWidth("100.0%");
		detailsLayout.setHeight("100.0%");
		detailsLayout.setMargin(false);
		detailsPanel.setContent(detailsLayout);
		
		return detailsPanel;
	}

}
