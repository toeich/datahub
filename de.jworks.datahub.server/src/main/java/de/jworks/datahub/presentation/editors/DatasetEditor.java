package de.jworks.datahub.presentation.editors;

import java.util.List;

import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.util.MethodProperty;
import com.vaadin.shared.ui.MarginInfo;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

import de.jworks.datahub.business.datasets.entity.Attribute;
import de.jworks.datahub.business.datasets.entity.Dataset;
import de.jworks.datahub.business.datasets.entity.DatasetGroup;
import de.jworks.datahub.business.datasets.entity.DatasetSchema;
import de.jworks.datahub.business.datasets.entity.Element;
import de.jworks.datahub.business.util.XMLUtil;
import de.jworks.datahub.presentation.Messages;

public class DatasetEditor extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private Panel panel;
	@AutoGenerated
	private VerticalLayout panelContent;
	public DatasetEditor() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		Messages.translate(this);
	}

	public void setDataset(Dataset dataset) {
		Document document = dataset.getDocument();
		DatasetGroup group = dataset.getGroup();
		DatasetSchema schema = group.getSchema();
		
		panelContent.removeAllComponents();
		
		processSingle(document, document.getDocumentElement(), schema.getRootElement(), panelContent);
	}
	
	private void process(Node parent, Element element, VerticalLayout container) {
		if (element.getMaxOccurs() == null || element.getMaxOccurs() > 1) {
			NodeList nodeList = XMLUtil.selectNodes(element.getName(), parent);
			processMultiple(parent, nodeList, element, container);
		} else {
			Node node = XMLUtil.selectNode(element.getName(), parent);
			if (node == null) {
				parent.appendChild(node = parent.getOwnerDocument().createElement(element.getName()));
			}
			processSingle(parent, node, element, container);
		}
	}

	private void processSingle(final Node parent, final Node node, Element element, final VerticalLayout container) {
		final VerticalLayout layout = new VerticalLayout();
		layout.setSpacing(true);

		if (element.getParent() != null) {
			HorizontalLayout header = new HorizontalLayout();
			header.setSpacing(true);

			Label name = new Label(element.getLabel());
			name.setStyleName("h2");
			header.addComponent(name);

			Button deleteButton = new Button();
			deleteButton.setCaption("Delete");
			deleteButton.setStyleName("link");
			deleteButton.addClickListener(new ClickListener() {
				@Override
				public void buttonClick(ClickEvent event) {
					parent.removeChild(node);
					container.removeComponent(layout);
				}
			});
			header.addComponent(deleteButton);
			header.setComponentAlignment(deleteButton, Alignment.MIDDLE_LEFT);
			
			if (element.getMaxOccurs() == null || element.getMaxOccurs() > 1) {
				Button moveButton = new Button();
				moveButton.setCaption("Move");
				moveButton.setStyleName("link");
				header.addComponent(moveButton);
				header.setComponentAlignment(moveButton, Alignment.MIDDLE_LEFT);
			}

			layout.addComponent(header);
		}

		List<Attribute> attributes = element.getAttributes();
		if (attributes.size() > 0) {
			VerticalLayout attributesContainer = new VerticalLayout();
			attributesContainer.setSpacing(true);
			
			for (Attribute attribute : attributes) {
				TextField textField = new TextField();
				textField.setWidth("100%");
				textField.setCaption(attribute.getLabel());
				textField.setDescription(attribute.getDescription());
				textField.setNullRepresentation(null);
				textField.setPropertyDataSource(new MethodProperty<String>(
						String.class, 
						node, 
						"getAttribute", 
						"setAttribute", 
						new Object[] { attribute.getName() }, 
						new Object[] { attribute.getName(), null }, 
						1));
				attributesContainer.addComponent(textField);
			}
			
			layout.addComponent(attributesContainer);
		}

		List<Element> elements = element.getElements();
		if (elements.size() > 0) {
			VerticalLayout elementsContainer = new VerticalLayout();
			elementsContainer.setMargin(new MarginInfo(false, false, false, true));
			elementsContainer.setSpacing(true);

			for (Element e : elements) {
				process(node, e, elementsContainer);
			}
			
			layout.addComponent(elementsContainer);
		}
		
		container.addComponent(layout);
	}

	private void processMultiple(Node parent, NodeList nodeList, Element element, VerticalLayout container) {
		List<Element> elements = element.getElements();
		if (elements.size() == 0) {
			processMultipleAsTable(parent, nodeList, element, container);
		} else {
			processMultipleAsGroup(parent, nodeList, element, container);
		}
	}

	private void processMultipleAsGroup(final Node parent, NodeList nodeList, final Element element, final VerticalLayout container) {
		final VerticalLayout layout = new VerticalLayout();
		layout.setSpacing(true);
		
		for (int i = 0; i < nodeList.getLength(); i++) {
			processSingle(parent, nodeList.item(i), element, layout);
		}
		
		final Button addButton = new Button();
		addButton.setStyleName("small");
		addButton.setCaption("Add " + element.getLabel());
		addButton.addClickListener(new ClickListener() {
			@Override
			public void buttonClick(ClickEvent event) {
				Node node = parent.getOwnerDocument().createElement(element.getName());
				Node ref = null; // FIXME
				parent.insertBefore(node, ref);
				processSingle(parent, node, element, layout);
				layout.addComponent(addButton);
			}
		});
		layout.addComponent(addButton);
		
		container.addComponent(layout);
	}

	private void processMultipleAsTable(final Node parent, final NodeList nodeList, final Element element, final VerticalLayout container) {
		VerticalLayout layout = new VerticalLayout();
		layout.setSpacing(true);
		
		HorizontalLayout header = new HorizontalLayout();
		header.setSpacing(true);
		
		Label name = new Label(element.getPluralLabel());
		name.setStyleName("h2");
		header.addComponent(name);
		
		Button addButton = new Button();
		addButton.setCaption("Add " + element.getLabel());
		addButton.setStyleName("link");
		header.addComponent(addButton);
		header.setComponentAlignment(addButton, Alignment.MIDDLE_LEFT);
		
		layout.addComponent(header);
		
		final Table table = new Table() {
			@Override
			public Property<?> getContainerProperty(Object itemId, Object propertyId) {
				return new MethodProperty<String>(
						String.class, 
						itemId, 
						"getAttribute", 
						"setAttribute", 
						new Object[] { propertyId }, 
						new Object[] { propertyId, null }, 
						1);
			}
		};
		for (Attribute attribute : element.getAttributes()) {
			table.addContainerProperty(attribute.getName(), String.class, null, attribute.getLabel(), null, null);
		}
		for (int i = 0; i < nodeList.getLength(); i++) {
			table.addItem(nodeList.item(i));
		}
		table.setWidth("100%");
		table.setHeight("100px");
		table.setEditable(true);
		layout.addComponent(table);
		
		container.addComponent(layout);

		addButton.addClickListener(new ClickListener() {
			@Override
			public void buttonClick(ClickEvent event) {
				Node node = parent.getOwnerDocument().createElement(element.getName());
				Node ref = null; // FIXME
				parent.insertBefore(node, ref);
				table.addItem(node);
			}
		});
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// panel
		panel = buildPanel();
		mainLayout.addComponent(panel);
		mainLayout.setExpandRatio(panel, 1.0f);
		
		return mainLayout;
	}

	@AutoGenerated
	private Panel buildPanel() {
		// common part: create layout
		panel = new Panel();
		panel.setStyleName("light");
		panel.setImmediate(false);
		panel.setWidth("100.0%");
		panel.setHeight("100.0%");
		
		// panelContent
		panelContent = new VerticalLayout();
		panelContent.setImmediate(false);
		panelContent.setWidth("100.0%");
		panelContent.setHeight("100.0%");
		panelContent.setMargin(false);
		panel.setContent(panelContent);
		
		return panel;
	}

}
