package de.jworks.datahub.presentation.admin;

import javax.inject.Inject;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.cdi.CDIView;
import com.vaadin.data.fieldgroup.FieldGroup;
import com.vaadin.data.util.BeanItem;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.shared.ui.MarginInfo;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.PasswordField;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TextField;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;

import de.jworks.datahub.business.common.boundary.UserService;
import de.jworks.datahub.business.common.entity.User;
import de.jworks.datahub.presentation.AdminUI;
import de.jworks.datahub.presentation.Messages;

@CDIView(value = "user!", supportsParameters = true, uis = { AdminUI.class })
public class UserView extends CustomComponent implements View {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private VerticalLayout body;
	@AutoGenerated
	private HorizontalLayout buttons;
	@AutoGenerated
	private Button cancelButton;
	@AutoGenerated
	private Button saveButton;
	@AutoGenerated
	private TabSheet tabSheet;
	@AutoGenerated
	private VerticalLayout userTab;
	@AutoGenerated
	private VerticalLayout userForm;
	@AutoGenerated
	private PasswordField password;
	@AutoGenerated
	private TextField email;
	@AutoGenerated
	private TextField fullName;
	@AutoGenerated
	private TextField name;
	@AutoGenerated
	private Label label;
	@Inject
	UserService userService;
	
	private FieldGroup fieldGroup;
	
	private User user;
	
	public UserView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		Messages.translate(this);

		userTab.setMargin(new MarginInfo(true, false, false, false));
		
		fieldGroup = new FieldGroup();
		
		saveButton.addClickListener(new ClickListener() {
			@Override
			public void buttonClick(ClickEvent event) {
				try {
					fieldGroup.commit();
					if (user.getId() == null) {
						userService.addUser(user);
					} else {
						userService.updateUser(user);
					}
					UI.getCurrent().getNavigator().navigateTo("users!/");
				} catch (Exception e) {
					Notification.show("Error", e.getMessage(), Notification.Type.ERROR_MESSAGE);
				}
			}
		});
		
		cancelButton.addClickListener(new ClickListener() {
			@Override
			public void buttonClick(ClickEvent event) {
				UI.getCurrent().getNavigator().navigateTo("users!/");
			}
		});
	}

	@Override
	public void enter(ViewChangeEvent event) {
		try {
			try {
				long userId = Long.parseLong(event.getParameters());
				user = userService.getUser(userId);
			} catch (Exception e) {
				user = new User();
				user.setName("New User");
			}
			
			label.setValue("<li class='icon-home'></li> / Users / " + user.getName());
			
			fieldGroup.setItemDataSource(new BeanItem<User>(user));
			fieldGroup.bindMemberFields(this);
		} catch (Exception e) {
			UI.getCurrent().getNavigator().navigateTo("users!/");
		}
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setStyleName("blue");
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// label
		label = new Label();
		label.setStyleName("h2");
		label.setImmediate(false);
		label.setWidth("-1px");
		label.setHeight("-1px");
		label.setValue("Home / Users / User");
		mainLayout.addComponent(label);
		
		// body
		body = buildBody();
		mainLayout.addComponent(body);
		mainLayout.setExpandRatio(body, 1.0f);
		
		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildBody() {
		// common part: create layout
		body = new VerticalLayout();
		body.setStyleName("white");
		body.setImmediate(false);
		body.setWidth("100.0%");
		body.setHeight("100.0%");
		body.setMargin(true);
		body.setSpacing(true);
		
		// tabSheet
		tabSheet = buildTabSheet();
		body.addComponent(tabSheet);
		body.setExpandRatio(tabSheet, 1.0f);
		
		// buttons
		buttons = buildButtons();
		body.addComponent(buttons);
		
		return body;
	}

	@AutoGenerated
	private TabSheet buildTabSheet() {
		// common part: create layout
		tabSheet = new TabSheet();
		tabSheet.setStyleName("minimal");
		tabSheet.setImmediate(true);
		tabSheet.setWidth("100.0%");
		tabSheet.setHeight("100.0%");
		
		// userTab
		userTab = buildUserTab();
		tabSheet.addTab(userTab, "User", null);
		
		return tabSheet;
	}

	@AutoGenerated
	private VerticalLayout buildUserTab() {
		// common part: create layout
		userTab = new VerticalLayout();
		userTab.setImmediate(false);
		userTab.setWidth("100.0%");
		userTab.setHeight("100.0%");
		userTab.setMargin(true);
		userTab.setSpacing(true);
		
		// userForm
		userForm = buildUserForm();
		userTab.addComponent(userForm);
		
		return userTab;
	}

	@AutoGenerated
	private VerticalLayout buildUserForm() {
		// common part: create layout
		userForm = new VerticalLayout();
		userForm.setImmediate(false);
		userForm.setWidth("100.0%");
		userForm.setHeight("-1px");
		userForm.setMargin(false);
		userForm.setSpacing(true);
		
		// name
		name = new TextField();
		name.setCaption("Username");
		name.setImmediate(false);
		name.setWidth("100.0%");
		name.setHeight("-1px");
		name.setRequired(true);
		userForm.addComponent(name);
		
		// fullName
		fullName = new TextField();
		fullName.setCaption("Full Name");
		fullName.setImmediate(false);
		fullName.setWidth("100.0%");
		fullName.setHeight("-1px");
		userForm.addComponent(fullName);
		
		// email
		email = new TextField();
		email.setCaption("E-Mail");
		email.setImmediate(false);
		email.setWidth("100.0%");
		email.setHeight("-1px");
		userForm.addComponent(email);
		
		// password
		password = new PasswordField();
		password.setCaption("Password");
		password.setImmediate(false);
		password.setWidth("100.0%");
		password.setHeight("-1px");
		password.setRequired(true);
		userForm.addComponent(password);
		
		return userForm;
	}

	@AutoGenerated
	private HorizontalLayout buildButtons() {
		// common part: create layout
		buttons = new HorizontalLayout();
		buttons.setImmediate(false);
		buttons.setWidth("-1px");
		buttons.setHeight("-1px");
		buttons.setMargin(false);
		buttons.setSpacing(true);
		
		// saveButton
		saveButton = new Button();
		saveButton.setStyleName("primary");
		saveButton.setCaption("Save");
		saveButton.setImmediate(true);
		saveButton.setWidth("-1px");
		saveButton.setHeight("-1px");
		buttons.addComponent(saveButton);
		
		// cancelButton
		cancelButton = new Button();
		cancelButton.setCaption("Cancel");
		cancelButton.setImmediate(true);
		cancelButton.setWidth("-1px");
		cancelButton.setHeight("-1px");
		buttons.addComponent(cancelButton);
		
		return buttons;
	}

}
