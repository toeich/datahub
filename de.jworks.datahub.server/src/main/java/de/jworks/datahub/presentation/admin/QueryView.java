package de.jworks.datahub.presentation.admin;

import javax.inject.Inject;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.cdi.CDIView;
import com.vaadin.data.fieldgroup.FieldGroup;
import com.vaadin.data.fieldgroup.FieldGroup.CommitException;
import com.vaadin.data.util.BeanItem;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.shared.ui.MarginInfo;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;

import de.jworks.datahub.business.transform.boundary.TransformationService;
import de.jworks.datahub.business.transform.entity.Datasink;
import de.jworks.datahub.business.transform.entity.Input;
import de.jworks.datahub.business.transform.entity.ItemType;
import de.jworks.datahub.business.transform.entity.Transformation;
import de.jworks.datahub.business.transform.entity.TransformationType;
import de.jworks.datahub.presentation.AdminUI;
import de.jworks.datahub.presentation.Messages;
import de.jworks.datahub.presentation.editors.DatasinkEditor;

@CDIView(value = "query!", supportsParameters = true, uis = { AdminUI.class })
public class QueryView extends CustomComponent implements View {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private VerticalLayout body;
	@AutoGenerated
	private HorizontalLayout buttons;
	@AutoGenerated
	private Button cancelButton;
	@AutoGenerated
	private Button saveButton;
	@AutoGenerated
	private TabSheet tabSheet;
	@AutoGenerated
	private VerticalLayout datasinkTab;
	@AutoGenerated
	private DatasinkEditor datasinkEditor;
	@AutoGenerated
	private VerticalLayout queryTab;
	@AutoGenerated
	private TextArea description;
	@AutoGenerated
	private TextField name;
	@AutoGenerated
	private Label label;
	
	@Inject
	TransformationService transformationService;
	
	private FieldGroup fieldGroup;
	
	private Transformation query;
	
	public QueryView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		Messages.translate(this);
		
		queryTab.setMargin(new MarginInfo(true, false, false, false));
		
		datasinkTab.setMargin(new MarginInfo(true, false, false, false));
		
		fieldGroup = new FieldGroup();
		
		saveButton.addClickListener(new ClickListener() {
			@Override
			public void buttonClick(ClickEvent event) {
				try {
					fieldGroup.commit();
					if (query.getId() == null) {
						transformationService.addTransformation(query);
					} else {
						transformationService.updateTransformation(query);
					}
					UI.getCurrent().getNavigator().navigateTo("dataflows!/");
				} catch (CommitException e) {
					Notification.show("Error", e.getMessage(), Notification.Type.ERROR_MESSAGE);
				}
			}
		});
		
		cancelButton.addClickListener(new ClickListener() {
			@Override
			public void buttonClick(ClickEvent event) {
				UI.getCurrent().getNavigator().navigateTo("dataflows!/");
			}
		});
	}

	@Override
	public void enter(ViewChangeEvent event) {
		try {
			try {
				long queryId = Long.parseLong(event.getParameters());
				query = transformationService.getTransformation(queryId);
			} catch (Exception e) {
				query = new Transformation();
				query.setName("New Query");
				query.setType(TransformationType.Query);
				Datasink datasink = new Datasink();
				datasink.setName("QueryResult");
				datasink.getSchema().addInput(new Input("result", "result", ItemType.XML_ELEMENT));
				query.getDefinition().setDatasink(datasink);
			}

			label.setValue("<li class='icon-home'></li> / Dataflows / " + query.getName());

			tabSheet.setSelectedTab(queryTab);

			fieldGroup.setItemDataSource(new BeanItem<Transformation>(query));
			fieldGroup.bindMemberFields(this);
			
			datasinkEditor.setDatasink(query.getDefinition().getDatasink());
		} catch (Exception e) {
			UI.getCurrent().getNavigator().navigateTo("dataflows!/");
		}
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setStyleName("blue");
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// label
		label = new Label();
		label.setStyleName("h2");
		label.setImmediate(false);
		label.setWidth("-1px");
		label.setHeight("-1px");
		label.setValue("Home / Dataflows / Query");
		mainLayout.addComponent(label);
		
		// body
		body = buildBody();
		mainLayout.addComponent(body);
		mainLayout.setExpandRatio(body, 1.0f);
		
		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildBody() {
		// common part: create layout
		body = new VerticalLayout();
		body.setStyleName("white");
		body.setImmediate(false);
		body.setWidth("100.0%");
		body.setHeight("100.0%");
		body.setMargin(true);
		body.setSpacing(true);
		
		// tabSheet
		tabSheet = buildTabSheet();
		body.addComponent(tabSheet);
		body.setExpandRatio(tabSheet, 1.0f);
		
		// buttons
		buttons = buildButtons();
		body.addComponent(buttons);
		
		return body;
	}

	@AutoGenerated
	private TabSheet buildTabSheet() {
		// common part: create layout
		tabSheet = new TabSheet();
		tabSheet.setStyleName("minimal");
		tabSheet.setImmediate(true);
		tabSheet.setWidth("100.0%");
		tabSheet.setHeight("100.0%");
		
		// queryTab
		queryTab = buildQueryTab();
		tabSheet.addTab(queryTab, "Query", null);
		
		// datasinkTab
		datasinkTab = buildDatasinkTab();
		tabSheet.addTab(datasinkTab, "Datasink", null);
		
		return tabSheet;
	}

	@AutoGenerated
	private VerticalLayout buildQueryTab() {
		// common part: create layout
		queryTab = new VerticalLayout();
		queryTab.setImmediate(false);
		queryTab.setWidth("100.0%");
		queryTab.setHeight("-1px");
		queryTab.setMargin(true);
		queryTab.setSpacing(true);
		
		// name
		name = new TextField();
		name.setCaption("Name");
		name.setImmediate(false);
		name.setWidth("100.0%");
		name.setHeight("-1px");
		name.setRequired(true);
		queryTab.addComponent(name);
		
		// description
		description = new TextArea();
		description.setCaption("Description");
		description.setImmediate(false);
		description.setWidth("100.0%");
		description.setHeight("-1px");
		queryTab.addComponent(description);
		
		return queryTab;
	}

	@AutoGenerated
	private VerticalLayout buildDatasinkTab() {
		// common part: create layout
		datasinkTab = new VerticalLayout();
		datasinkTab.setImmediate(false);
		datasinkTab.setWidth("100.0%");
		datasinkTab.setHeight("100.0%");
		datasinkTab.setMargin(true);
		datasinkTab.setSpacing(true);
		
		// datasinkEditor
		datasinkEditor = new DatasinkEditor();
		datasinkEditor.setImmediate(false);
		datasinkEditor.setWidth("100.0%");
		datasinkEditor.setHeight("100.0%");
		datasinkTab.addComponent(datasinkEditor);
		datasinkTab.setExpandRatio(datasinkEditor, 1.0f);
		
		return datasinkTab;
	}

	@AutoGenerated
	private HorizontalLayout buildButtons() {
		// common part: create layout
		buttons = new HorizontalLayout();
		buttons.setImmediate(false);
		buttons.setWidth("-1px");
		buttons.setHeight("-1px");
		buttons.setMargin(false);
		buttons.setSpacing(true);
		
		// saveButton
		saveButton = new Button();
		saveButton.setStyleName("primary");
		saveButton.setCaption("Save");
		saveButton.setImmediate(true);
		saveButton.setWidth("-1px");
		saveButton.setHeight("-1px");
		buttons.addComponent(saveButton);
		
		// cancelButton
		cancelButton = new Button();
		cancelButton.setCaption("Cancel");
		cancelButton.setImmediate(true);
		cancelButton.setWidth("-1px");
		cancelButton.setHeight("-1px");
		buttons.addComponent(cancelButton);
		
		return buttons;
	}

}
