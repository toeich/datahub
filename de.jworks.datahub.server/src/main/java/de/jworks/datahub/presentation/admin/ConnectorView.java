package de.jworks.datahub.presentation.admin;

import javax.inject.Inject;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.cdi.CDIView;
import com.vaadin.data.fieldgroup.FieldGroup;
import com.vaadin.data.fieldgroup.FieldGroup.CommitException;
import com.vaadin.data.util.BeanItem;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.shared.ui.MarginInfo;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;
import com.vaadin.ui.Window.CloseEvent;
import com.vaadin.ui.Window.CloseListener;

import de.jworks.datahub.business.connectors.boundary.ConnectorService;
import de.jworks.datahub.business.connectors.entity.Connector;
import de.jworks.datahub.business.transform.entity.Datasource;
import de.jworks.datahub.business.transform.entity.ItemType;
import de.jworks.datahub.business.transform.entity.Output;
import de.jworks.datahub.presentation.AdminUI;
import de.jworks.datahub.presentation.Messages;
import de.jworks.datahub.presentation.editors.DatasourceEditor;

@CDIView(value = "connector!", supportsParameters = true, uis = { AdminUI.class })
public class ConnectorView extends CustomComponent implements View {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private VerticalLayout body;
	@AutoGenerated
	private HorizontalLayout buttons;
	@AutoGenerated
	private Button cancelButton;
	@AutoGenerated
	private Button saveButton;
	@AutoGenerated
	private TabSheet tabSheet;
	@AutoGenerated
	private VerticalLayout datasinksTab;
	@AutoGenerated
	private Button addDatasinkButton;
	@AutoGenerated
	private Table datasinksTable;
	@AutoGenerated
	private VerticalLayout datasourcesTab;
	@AutoGenerated
	private Button addDatasourceButton;
	@AutoGenerated
	private Table datasourcesTable;
	@AutoGenerated
	private VerticalLayout connectorTab;
	@AutoGenerated
	private TextArea description;
	@AutoGenerated
	private TextField name;
	@AutoGenerated
	private Label label;
	
	@Inject
	ConnectorService connectorService;
	
	private Connector connector;
	
	private FieldGroup fieldGroup;
	
	private BeanItemContainer<Datasource> datasources = new BeanItemContainer<Datasource>(Datasource.class); 
	
	public ConnectorView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		Messages.translate(this);
		
		connectorTab.setMargin(new MarginInfo(true, false, false, false));
		
		fieldGroup = new FieldGroup();
		
		datasourcesTab.setMargin(new MarginInfo(true, false, false, false));
		
		datasourcesTable.setContainerDataSource(datasources);
		
		addDatasourceButton.addClickListener(new ClickListener() {
			@Override
			public void buttonClick(ClickEvent event) {
				final Datasource datasource = new Datasource();
				datasource.getSchema().addOutput(new Output("Output", "output", ItemType.XML_ELEMENT));
				Window window = new Window();
				window.setWidth("80%");
				window.setHeight("80%");
				window.setModal(true);
				window.setContent(new DatasourceEditor(datasource));
				window.addCloseListener(new CloseListener() {
					@Override
					public void windowClose(CloseEvent e) {
						connector.getSchema().getDatasources().add(datasource);
					}
				});
				UI.getCurrent().addWindow(window);
			}
		});
		
		datasinksTab.setMargin(new MarginInfo(true, false, false, false));
		
		saveButton.addClickListener(new ClickListener() {
			@Override
			public void buttonClick(ClickEvent event) {
				try {
					fieldGroup.commit();
					if (connector.getId() == null) {
						connectorService.addConnector(connector);
					} else {
						connectorService.updateConnector(connector);
					}
					UI.getCurrent().getNavigator().navigateTo("connectors!/");
				} catch (CommitException e) {
					Notification.show("Error", e.getMessage(), Notification.Type.ERROR_MESSAGE);
				}
			}
		});
		
		cancelButton.addClickListener(new ClickListener() {
			@Override
			public void buttonClick(ClickEvent event) {
				UI.getCurrent().getNavigator().navigateTo("connectors!/");
			}
		});
	}

	@Override
	public void enter(ViewChangeEvent event) {
		try {
			try {
				long connectorId = Long.parseLong(event.getParameters());
				connector = connectorService.getConnector(connectorId);
			} catch (Exception e) {
				connector = new Connector();
				connector.setName("New Connector");
			}

			label.setValue("<li class='icon-home'></li> / Connectors / " + connector.getName());

			tabSheet.setSelectedTab(connectorTab);

			fieldGroup.setItemDataSource(new BeanItem<Connector>(connector));
			fieldGroup.bindMemberFields(this);
			
			refreshDatasourcesTable();
		} catch (Exception e) {
			UI.getCurrent().getNavigator().navigateTo("connectors!/");
		}
	}
	
	private void refreshDatasourcesTable() {
		datasources.removeAllItems();
		datasources.addAll(connector.getSchema().getDatasources());
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setStyleName("blue");
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// label
		label = new Label();
		label.setStyleName("h2");
		label.setImmediate(false);
		label.setWidth("-1px");
		label.setHeight("-1px");
		label.setValue("Home / Connectors / Connector");
		mainLayout.addComponent(label);
		
		// body
		body = buildBody();
		mainLayout.addComponent(body);
		mainLayout.setExpandRatio(body, 1.0f);
		
		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildBody() {
		// common part: create layout
		body = new VerticalLayout();
		body.setStyleName("white");
		body.setImmediate(false);
		body.setWidth("100.0%");
		body.setHeight("100.0%");
		body.setMargin(true);
		body.setSpacing(true);
		
		// tabSheet
		tabSheet = buildTabSheet();
		body.addComponent(tabSheet);
		body.setExpandRatio(tabSheet, 1.0f);
		
		// buttons
		buttons = buildButtons();
		body.addComponent(buttons);
		
		return body;
	}

	@AutoGenerated
	private TabSheet buildTabSheet() {
		// common part: create layout
		tabSheet = new TabSheet();
		tabSheet.setStyleName("minimal");
		tabSheet.setImmediate(true);
		tabSheet.setWidth("100.0%");
		tabSheet.setHeight("100.0%");
		
		// connectorTab
		connectorTab = buildConnectorTab();
		tabSheet.addTab(connectorTab, "Connector", null);
		
		// datasourcesTab
		datasourcesTab = buildDatasourcesTab();
		tabSheet.addTab(datasourcesTab, "Datasources", null);
		
		// datasinksTab
		datasinksTab = buildDatasinksTab();
		tabSheet.addTab(datasinksTab, "Datasinks", null);
		
		return tabSheet;
	}

	@AutoGenerated
	private VerticalLayout buildConnectorTab() {
		// common part: create layout
		connectorTab = new VerticalLayout();
		connectorTab.setImmediate(false);
		connectorTab.setWidth("100.0%");
		connectorTab.setHeight("-1px");
		connectorTab.setMargin(true);
		connectorTab.setSpacing(true);
		
		// name
		name = new TextField();
		name.setCaption("Name");
		name.setImmediate(false);
		name.setWidth("100.0%");
		name.setHeight("-1px");
		name.setRequired(true);
		connectorTab.addComponent(name);
		
		// description
		description = new TextArea();
		description.setCaption("Description");
		description.setImmediate(false);
		description.setWidth("100.0%");
		description.setHeight("-1px");
		connectorTab.addComponent(description);
		
		return connectorTab;
	}

	@AutoGenerated
	private VerticalLayout buildDatasourcesTab() {
		// common part: create layout
		datasourcesTab = new VerticalLayout();
		datasourcesTab.setImmediate(false);
		datasourcesTab.setWidth("100.0%");
		datasourcesTab.setHeight("100.0%");
		datasourcesTab.setMargin(true);
		datasourcesTab.setSpacing(true);
		
		// datasourcesTable
		datasourcesTable = new Table();
		datasourcesTable.setImmediate(false);
		datasourcesTable.setWidth("100.0%");
		datasourcesTable.setHeight("100.0%");
		datasourcesTab.addComponent(datasourcesTable);
		datasourcesTab.setExpandRatio(datasourcesTable, 1.0f);
		
		// addDatasourceButton
		addDatasourceButton = new Button();
		addDatasourceButton.setStyleName("link");
		addDatasourceButton.setCaption("Add Datasource");
		addDatasourceButton.setImmediate(false);
		addDatasourceButton.setWidth("-1px");
		addDatasourceButton.setHeight("-1px");
		datasourcesTab.addComponent(addDatasourceButton);
		
		return datasourcesTab;
	}

	@AutoGenerated
	private VerticalLayout buildDatasinksTab() {
		// common part: create layout
		datasinksTab = new VerticalLayout();
		datasinksTab.setImmediate(false);
		datasinksTab.setWidth("100.0%");
		datasinksTab.setHeight("100.0%");
		datasinksTab.setMargin(true);
		datasinksTab.setSpacing(true);
		
		// datasinksTable
		datasinksTable = new Table();
		datasinksTable.setImmediate(false);
		datasinksTable.setWidth("100.0%");
		datasinksTable.setHeight("100.0%");
		datasinksTab.addComponent(datasinksTable);
		datasinksTab.setExpandRatio(datasinksTable, 1.0f);
		
		// addDatasinkButton
		addDatasinkButton = new Button();
		addDatasinkButton.setStyleName("link");
		addDatasinkButton.setCaption("Add Datasink");
		addDatasinkButton.setImmediate(false);
		addDatasinkButton.setWidth("-1px");
		addDatasinkButton.setHeight("-1px");
		datasinksTab.addComponent(addDatasinkButton);
		
		return datasinksTab;
	}

	@AutoGenerated
	private HorizontalLayout buildButtons() {
		// common part: create layout
		buttons = new HorizontalLayout();
		buttons.setImmediate(false);
		buttons.setWidth("-1px");
		buttons.setHeight("-1px");
		buttons.setMargin(false);
		buttons.setSpacing(true);
		
		// saveButton
		saveButton = new Button();
		saveButton.setStyleName("primary");
		saveButton.setCaption("Save");
		saveButton.setImmediate(true);
		saveButton.setWidth("-1px");
		saveButton.setHeight("-1px");
		buttons.addComponent(saveButton);
		
		// cancelButton
		cancelButton = new Button();
		cancelButton.setCaption("Cancel");
		cancelButton.setImmediate(true);
		cancelButton.setWidth("-1px");
		cancelButton.setHeight("-1px");
		buttons.addComponent(cancelButton);
		
		return buttons;
	}

}
