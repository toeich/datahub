package de.jworks.datahub.presentation.views;

import java.util.Arrays;

import javax.annotation.PostConstruct;
import javax.inject.Inject;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Table;
import com.vaadin.ui.Table.ColumnGenerator;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;
import com.vaadin.ui.Window.CloseEvent;
import com.vaadin.ui.Window.CloseListener;

import de.jworks.datahub.business.common.entity.Project;
import de.jworks.datahub.business.projects.boundary.ProjectService;
import de.jworks.datahub.presentation.Messages;
import de.jworks.datahub.presentation.editors.ProjectEditor;
import de.jworks.datahub.presentation.editors.ProjectEditor.SaveEvent;
import de.jworks.datahub.presentation.editors.ProjectEditor.SaveListener;

public class AdminViewProjects extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private HorizontalLayout buttons;
	@AutoGenerated
	private Button newProjectButton;
	@AutoGenerated
	private Table table;
	@AutoGenerated
	private Label label;
	
	
	@Inject
	ProjectService projectService;
	
	
	private BeanItemContainer<Project> projects = new BeanItemContainer<Project>(Project.class);
	
	
	public AdminViewProjects() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		label.setValue(Messages.getString("projects"));
		
		table.addGeneratedColumn("actions", new ActionsColumn());
		
		table.setContainerDataSource(projects, Arrays.asList("name", "description", "actions"));
		table.setColumnHeader("name", Messages.getString("name"));
		table.setColumnHeader("description", Messages.getString("description"));
		table.setColumnHeader("actions", Messages.getString("actions"));
	    table.setColumnExpandRatio("name", 1.0f);
	    table.setColumnExpandRatio("description", 2.0f);
	    
	    newProjectButton.addClickListener(new NewProjectHandler());
	}

	@PostConstruct 
	public void refreshTable() {
		projects.removeAllItems();
		projects.addAll(projectService.getProjects());
	}

	private class ActionsColumn implements ColumnGenerator {
		
		@Override
		public Object generateCell(Table source, Object itemId, Object columnId) {
			Project project = projects.getItem(itemId).getBean();
			HorizontalLayout actions = new HorizontalLayout();
			actions.setSpacing(true);
			actions.addComponent(new EditProjectButton(project));
			actions.addComponent(new DeleteProjectButton(project));
			return actions;
		}
		
	}

	private class EditProjectButton extends Button implements ClickListener {
		
		private Project project;
		
		public EditProjectButton(Project project) {
			this.project = project;
			
			setCaption(Messages.getString("edit"));
			setStyleName("link");
			
			addClickListener(this);
		}
		
		@Override
		public void buttonClick(ClickEvent event) {
			final Window window = new Window(Messages.format("editProject", project));
            window.setModal(true);
            window.setDraggable(false);
            window.setResizable(false);
            window.addCloseListener(new CloseListener() {
                @Override
                public void windowClose(CloseEvent e) {
                    refreshTable();
                }
            });
            
            ProjectEditor editor = new ProjectEditor(project);
            editor.addSaveListener(new SaveListener() {
                @Override
                public void save(SaveEvent event) {
                    if (event.getProject() != null) {
                        projectService.updateProject(event.getProject());
                    }
                    window.close();
                }
            });
            window.setContent(editor);
    
            UI.getCurrent().addWindow(window);
		}
		
	}
	
	private class DeleteProjectButton extends Button implements ClickListener {
		
		private Project project;
		
		public DeleteProjectButton(Project project) {
			this.project = project;
			
			setCaption(Messages.getString("delete"));
			setStyleName("link");
			
			addClickListener(this);
		}
		
		@Override
		public void buttonClick(ClickEvent event) {
		    projectService.removeProject(project);
			refreshTable();
		}
		
	}

	private class NewProjectHandler implements ClickListener {
		
		@Override
		public void buttonClick(ClickEvent event) {
			final Window window = new Window(Messages.getString("New Project"));
			window.setModal(true);
			window.setDraggable(false);
			window.setResizable(false);
            window.addCloseListener(new CloseListener() {
                @Override
                public void windowClose(CloseEvent e) {
                    refreshTable();
                }
            });
			
			ProjectEditor editor = new ProjectEditor(new Project());
			editor.addSaveListener(new SaveListener() {
                @Override
                public void save(SaveEvent event) {
                    if (event.getProject() != null) {
                        projectService.addProject(event.getProject());
                    }
                    window.close();
                }
			});
			window.setContent(editor);
	
			UI.getCurrent().addWindow(window);
		}
		
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// label
		label = new Label();
		label.setStyleName("h1");
		label.setImmediate(false);
		label.setWidth("-1px");
		label.setHeight("-1px");
		label.setValue("Projects");
		mainLayout.addComponent(label);
		
		// table
		table = new Table();
		table.setImmediate(false);
		table.setWidth("100.0%");
		table.setHeight("100.0%");
		mainLayout.addComponent(table);
		mainLayout.setExpandRatio(table, 1.0f);
		
		// buttons
		buttons = buildButtons();
		mainLayout.addComponent(buttons);
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildButtons() {
		// common part: create layout
		buttons = new HorizontalLayout();
		buttons.setImmediate(false);
		buttons.setWidth("-1px");
		buttons.setHeight("-1px");
		buttons.setMargin(false);
		buttons.setSpacing(true);
		
		// newProjectButton
		newProjectButton = new Button();
		newProjectButton.setStyleName("small");
		newProjectButton.setCaption("New Project...");
		newProjectButton.setImmediate(true);
		newProjectButton.setWidth("-1px");
		newProjectButton.setHeight("-1px");
		buttons.addComponent(newProjectButton);
		
		return buttons;
	}

}
