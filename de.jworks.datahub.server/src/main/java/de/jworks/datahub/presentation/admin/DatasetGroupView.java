package de.jworks.datahub.presentation.admin;

import java.util.Arrays;

import javax.inject.Inject;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.cdi.CDIView;
import com.vaadin.data.Container;
import com.vaadin.data.fieldgroup.FieldGroup;
import com.vaadin.data.fieldgroup.FieldGroup.CommitException;
import com.vaadin.data.util.BeanItem;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.shared.ui.MarginInfo;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DefaultFieldFactory;
import com.vaadin.ui.Field;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.Table;
import com.vaadin.ui.Table.ColumnGenerator;
import com.vaadin.ui.TableFieldFactory;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;

import de.jworks.datahub.business.datasets.boundary.DatasetService;
import de.jworks.datahub.business.datasets.entity.ColumnDefinition;
import de.jworks.datahub.business.datasets.entity.Dataset;
import de.jworks.datahub.business.datasets.entity.DatasetGroup;
import de.jworks.datahub.presentation.AdminUI;
import de.jworks.datahub.presentation.Messages;
import de.jworks.datahub.presentation.editors.DatasetEditor;
import de.jworks.datahub.presentation.editors.DatasetSchemaEditor;

@CDIView(value = "datasetgroup!", supportsParameters = true, uis = { AdminUI.class })
public class DatasetGroupView extends CustomComponent implements View {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private VerticalLayout body;
	@AutoGenerated
	private HorizontalLayout buttons;
	@AutoGenerated
	private Button cancelButton;
	@AutoGenerated
	private Button saveButton;
	@AutoGenerated
	private TabSheet tabSheet;
	@AutoGenerated
	private VerticalLayout columnsTab;
	@AutoGenerated
	private Button addColumnButton;
	@AutoGenerated
	private Table columnsTable;
	@AutoGenerated
	private VerticalLayout schemaTab;
	@AutoGenerated
	private Button testSchemaButton;
	@AutoGenerated
	private DatasetSchemaEditor schemaEditor;
	@AutoGenerated
	private VerticalLayout datasetGroupTab;
	@AutoGenerated
	private TextArea description;
	@AutoGenerated
	private TextField name;
	@AutoGenerated
	private Label label;
	
	@Inject
	DatasetService datasetService;
	
	private FieldGroup fieldGroup;
	
	private DatasetGroup datasetGroup;
	
	private BeanItemContainer<ColumnDefinition> columns = new BeanItemContainer<ColumnDefinition>(ColumnDefinition.class);
	
	public DatasetGroupView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		datasetGroupTab.setMargin(new MarginInfo(true, false, false, false));
		
		fieldGroup = new FieldGroup();
		
		schemaTab.setMargin(new MarginInfo(true, false, false, false));
		
		testSchemaButton.addClickListener(new ClickListener() {
			@Override
			public void buttonClick(ClickEvent event) {
				Dataset dataset = new Dataset();
				dataset.setGroup(datasetGroup);
				Window window = new Window();
				window.setWidth("80%");
				window.setHeight("80%");
				window.setModal(true);
				DatasetEditor datasetEditor = new DatasetEditor();
				datasetEditor.setDataset(dataset);
				window.setContent(datasetEditor);
				UI.getCurrent().addWindow(window);
			}
		});
		
		columnsTab.setMargin(new MarginInfo(true, false, true, false));
		
		columnsTable.addGeneratedColumn("actions", new ColumnGenerator() {
			@Override
			public Object generateCell(Table source, final Object itemId, Object columnId) {
				HorizontalLayout actions = new HorizontalLayout();
				actions.setSpacing(true);
				Button deleteButton = new Button();
				deleteButton.setStyleName("link");
				deleteButton.setCaption(Messages.getString("delete"));
				deleteButton.addClickListener(new ClickListener() {
					@Override
					public void buttonClick(ClickEvent event) {
						columns.removeItem(itemId);
					}
				});
				actions.addComponent(deleteButton);
				return actions;
			}
		});
		
		columnsTable.setContainerDataSource(columns, Arrays.asList("name", "format", "actions"));
		columnsTable.setColumnExpandRatio("name", 1.0f);
		columnsTable.setColumnExpandRatio("format", 1.0f);
		
		columnsTable.setTableFieldFactory(new TableFieldFactory() {
			@Override
			public Field<?> createField(Container container, Object itemId, Object propertyId, Component uiContext) {
				Field<?> field = DefaultFieldFactory.get().createField(container, itemId, propertyId, uiContext);
				field.setStyleName("borderless");
				field.setSizeFull();
				return field;
			}
		});
		columnsTable.setEditable(true);
		
		addColumnButton.addClickListener(new ClickListener() {
			@Override
			public void buttonClick(ClickEvent event) {
				columns.addBean(new ColumnDefinition("name", "format"));
			}
		});
		
		saveButton.addClickListener(new ClickListener() {
			@Override
			public void buttonClick(ClickEvent event) {
				try {
					fieldGroup.commit();
					datasetGroup.setColumns(columns.getItemIds());
					if (datasetGroup.getId() == null) {
						datasetService.addDatasetGroup(datasetGroup);
					} else {
						datasetService.updateDatasetGroup(datasetGroup);
					}
					UI.getCurrent().getNavigator().navigateTo("datasetgroups!/");
				} catch (CommitException e) {
					Notification.show("Error", e.getMessage(), Notification.Type.ERROR_MESSAGE);
				}
			}
		});
		
		cancelButton.addClickListener(new ClickListener() {
			@Override
			public void buttonClick(ClickEvent event) {
				UI.getCurrent().getNavigator().navigateTo("datasetgroups!/");
			}
		});
		
		Messages.translate(this);
	}

	@Override
	public void enter(ViewChangeEvent event) {
		try {
			try {
				long datasetGroupId = Long.parseLong(event.getParameters());
				datasetGroup = datasetService.getDatasetGroup(datasetGroupId);
			} catch (Exception e) {
				datasetGroup = new DatasetGroup();
				datasetGroup.setName("New Dataset Group");
			}

			label.setValue(Messages.format(this, "label_value", datasetGroup.getName()));

			tabSheet.setSelectedTab(datasetGroupTab);

			fieldGroup.setItemDataSource(new BeanItem<DatasetGroup>(datasetGroup));
			fieldGroup.bindMemberFields(this);

			schemaEditor.setDatasetSchema(datasetGroup.getSchema());
			
			columns.removeAllItems();
			columns.addAll(datasetGroup.getColumns());
		} catch (Exception e) {
			UI.getCurrent().getNavigator().navigateTo("datasetgroups!/");
		}
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setStyleName("blue");
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// label
		label = new Label();
		label.setStyleName("h2");
		label.setImmediate(false);
		label.setWidth("-1px");
		label.setHeight("-1px");
		label.setValue("Home / Dataset Groups / Dataset Group");
		mainLayout.addComponent(label);
		
		// body
		body = buildBody();
		mainLayout.addComponent(body);
		mainLayout.setExpandRatio(body, 1.0f);
		
		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildBody() {
		// common part: create layout
		body = new VerticalLayout();
		body.setStyleName("white");
		body.setImmediate(false);
		body.setWidth("100.0%");
		body.setHeight("100.0%");
		body.setMargin(true);
		body.setSpacing(true);
		
		// tabSheet
		tabSheet = buildTabSheet();
		body.addComponent(tabSheet);
		body.setExpandRatio(tabSheet, 1.0f);
		
		// buttons
		buttons = buildButtons();
		body.addComponent(buttons);
		
		return body;
	}

	@AutoGenerated
	private TabSheet buildTabSheet() {
		// common part: create layout
		tabSheet = new TabSheet();
		tabSheet.setStyleName("minimal");
		tabSheet.setImmediate(true);
		tabSheet.setWidth("100.0%");
		tabSheet.setHeight("100.0%");
		
		// datasetGroupTab
		datasetGroupTab = buildDatasetGroupTab();
		tabSheet.addTab(datasetGroupTab, "Dataset Group", null);
		
		// schemaTab
		schemaTab = buildSchemaTab();
		tabSheet.addTab(schemaTab, "Schema", null);
		
		// columnsTab
		columnsTab = buildColumnsTab();
		tabSheet.addTab(columnsTab, "Columns", null);
		
		return tabSheet;
	}

	@AutoGenerated
	private VerticalLayout buildDatasetGroupTab() {
		// common part: create layout
		datasetGroupTab = new VerticalLayout();
		datasetGroupTab.setImmediate(false);
		datasetGroupTab.setWidth("100.0%");
		datasetGroupTab.setHeight("-1px");
		datasetGroupTab.setMargin(true);
		datasetGroupTab.setSpacing(true);
		
		// name
		name = new TextField();
		name.setCaption("Name");
		name.setImmediate(false);
		name.setWidth("100.0%");
		name.setHeight("-1px");
		name.setRequired(true);
		datasetGroupTab.addComponent(name);
		
		// description
		description = new TextArea();
		description.setCaption("Description");
		description.setImmediate(false);
		description.setWidth("100.0%");
		description.setHeight("-1px");
		datasetGroupTab.addComponent(description);
		
		return datasetGroupTab;
	}

	@AutoGenerated
	private VerticalLayout buildSchemaTab() {
		// common part: create layout
		schemaTab = new VerticalLayout();
		schemaTab.setImmediate(false);
		schemaTab.setWidth("100.0%");
		schemaTab.setHeight("100.0%");
		schemaTab.setMargin(true);
		schemaTab.setSpacing(true);
		
		// schemaEditor
		schemaEditor = new DatasetSchemaEditor();
		schemaEditor.setImmediate(false);
		schemaEditor.setWidth("100.0%");
		schemaEditor.setHeight("100.0%");
		schemaTab.addComponent(schemaEditor);
		schemaTab.setExpandRatio(schemaEditor, 1.0f);
		
		// testSchemaButton
		testSchemaButton = new Button();
		testSchemaButton.setStyleName("small");
		testSchemaButton.setCaption("Test");
		testSchemaButton.setImmediate(true);
		testSchemaButton.setWidth("-1px");
		testSchemaButton.setHeight("-1px");
		schemaTab.addComponent(testSchemaButton);
		schemaTab.setComponentAlignment(testSchemaButton, new Alignment(6));
		
		return schemaTab;
	}

	@AutoGenerated
	private VerticalLayout buildColumnsTab() {
		// common part: create layout
		columnsTab = new VerticalLayout();
		columnsTab.setImmediate(false);
		columnsTab.setWidth("100.0%");
		columnsTab.setHeight("100.0%");
		columnsTab.setMargin(true);
		columnsTab.setSpacing(true);
		
		// columnsTable
		columnsTable = new Table();
		columnsTable.setImmediate(false);
		columnsTable.setWidth("100.0%");
		columnsTable.setHeight("100.0%");
		columnsTab.addComponent(columnsTable);
		columnsTab.setExpandRatio(columnsTable, 1.0f);
		
		// addColumnButton
		addColumnButton = new Button();
		addColumnButton.setStyleName("link");
		addColumnButton.setCaption("Add Column");
		addColumnButton.setImmediate(true);
		addColumnButton.setWidth("-1px");
		addColumnButton.setHeight("-1px");
		columnsTab.addComponent(addColumnButton);
		
		return columnsTab;
	}

	@AutoGenerated
	private HorizontalLayout buildButtons() {
		// common part: create layout
		buttons = new HorizontalLayout();
		buttons.setImmediate(false);
		buttons.setWidth("-1px");
		buttons.setHeight("-1px");
		buttons.setMargin(false);
		buttons.setSpacing(true);
		
		// saveButton
		saveButton = new Button();
		saveButton.setStyleName("primary");
		saveButton.setCaption("Save");
		saveButton.setImmediate(true);
		saveButton.setWidth("-1px");
		saveButton.setHeight("-1px");
		buttons.addComponent(saveButton);
		
		// cancelButton
		cancelButton = new Button();
		cancelButton.setCaption("Cancel");
		cancelButton.setImmediate(true);
		cancelButton.setWidth("-1px");
		cancelButton.setHeight("-1px");
		buttons.addComponent(cancelButton);
		
		return buttons;
	}

}
