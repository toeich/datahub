package de.jworks.datahub.presentation.editors;

import java.io.Serializable;
import java.util.Arrays;
import java.util.List;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.fieldgroup.FieldGroup;
import com.vaadin.data.util.BeanItem;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Notification;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;
import com.vaadin.util.ReflectTools;

import de.jworks.datahub.business.common.entity.Project;
import de.jworks.datahub.business.systems.entity.System;
import de.jworks.datahub.business.transform.entity.Datasink;
import de.jworks.datahub.business.transform.entity.Datasource;
import de.jworks.datahub.business.transform.entity.Output;
import de.jworks.datahub.presentation.Messages;

public class SystemEditor extends CustomComponent {
	
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private HorizontalLayout buttons;
	@AutoGenerated
	private Button cancelButton;
	@AutoGenerated
	private Button okButton;
	@AutoGenerated
	private TabSheet tabSheet;
	@AutoGenerated
	private VerticalLayout lookupsTab;
	@AutoGenerated
	private HorizontalLayout lookupsButtons;
	@AutoGenerated
	private Button newLookupButton;
	@AutoGenerated
	private Table lookupsTable;
	@AutoGenerated
	private VerticalLayout datasinksTab;
	@AutoGenerated
	private HorizontalLayout datasinksButtons;
	@AutoGenerated
	private Button newDatasinkButton;
	@AutoGenerated
	private Table datasinksTable;
	@AutoGenerated
	private VerticalLayout datasourcesTab;
	@AutoGenerated
	private HorizontalLayout datasourcesButtons;
	@AutoGenerated
	private Button newDatasourceButton;
	@AutoGenerated
	private Table datasourcesTable;
	@AutoGenerated
	private ComboBox project;
	@AutoGenerated
	private TextArea description;
	@AutoGenerated
	private TextField name;
	
	private BeanItemContainer<Datasource> datasources;
	
	private BeanItemContainer<Datasink> datasinks;
	
	public SystemEditor(final System system, List<Project> projects) {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		Messages.translate(this);

		name.setNullRepresentation(null);
		description.setNullRepresentation(null);
		
		// project
		project.setContainerDataSource(new BeanItemContainer<Project>(Project.class, projects));
		project.setItemCaptionMode(ComboBox.ItemCaptionMode.PROPERTY);
		project.setItemCaptionPropertyId("name");
		
		// datasources
		datasources = new BeanItemContainer<Datasource>(Datasource.class, system.getSchema().getDatasources());
		datasourcesTable.addGeneratedColumn("actions", new DatasourceActionsColumn());
		datasourcesTable.setContainerDataSource(datasources, Arrays.asList("name", "actions"));
		datasourcesTable.setColumnExpandRatio("name", 1.0f);
		newDatasourceButton.addClickListener(new NewDatasourceHandler());
		
		datasinks = new BeanItemContainer<Datasink>(Datasink.class, system.getSchema().getDatasinks());
//		datasinksTable.addGeneratedColumn("actions", new DatasinkActionsColumn());
		datasinksTable.setContainerDataSource(datasinks, Arrays.asList("name"));
		datasinksTable.setColumnExpandRatio("name", 1.0f);
		
		// bind fields
		final FieldGroup fieldGroup = new FieldGroup();
		fieldGroup.setItemDataSource(new BeanItem<System>(system));
		fieldGroup.bindMemberFields(this);
		
		okButton.addClickListener(new Button.ClickListener() {
			@Override
			public void buttonClick(Button.ClickEvent event) {
				try {
					fieldGroup.commit();
					system.getSchema().setDatasources(datasources.getItemIds());
					system.getSchema().setDatasinks(datasinks.getItemIds());
//					system.updateData();
					fireEvent(new SaveEvent(SystemEditor.this, system));
				} catch (FieldGroup.CommitException e) {
					Notification.show(e.getMessage(), Notification.Type.ERROR_MESSAGE);
				}
			}
		});
		
		cancelButton.addClickListener(new Button.ClickListener() {
			@Override
			public void buttonClick(Button.ClickEvent event) {
				fieldGroup.discard();
				fireEvent(new SaveEvent(SystemEditor.this, null));
			}
		});
	}
	
	private class DatasourceActionsColumn implements Table.ColumnGenerator {

		@Override
		public Object generateCell(Table source, Object itemId, Object columnId) {
			Datasource datasource = datasources.getItem(itemId).getBean();
			HorizontalLayout actions = new HorizontalLayout();
			actions.setSpacing(true);
			actions.addComponent(new EditDatasourceButton(datasource));
			actions.addComponent(new DeleteDatasourceButton(datasource));
			return actions;
		}
		
	}
	
	private class EditDatasourceButton extends Button implements Button.ClickListener {
		
		private Datasource datasource;
		
		public EditDatasourceButton(Datasource datasource) {
			this.datasource = datasource;
			
			setCaption("Edit");
			setStyleName("link");
			
			addClickListener(this);
		}

		@Override
		public void buttonClick(ClickEvent event) {
			final Window window = new Window(Messages.format("editDatasource", datasource.getName()));
			window.setWidth("80%");
			window.setHeight("80%");
			window.setModal(true);
			window.setResizable(false);
			window.setDraggable(false);
			
			DatasourceEditor editor = new DatasourceEditor(datasource);
			editor.addSaveListener(new DatasourceEditor.SaveListener() {
				@Override
				public void save(DatasourceEditor.SaveEvent event) {
					if (event.getDatasource() != null) {
						datasources.addBean(event.getDatasource());
					}
					window.close();
				}
			});
			window.setContent(editor);
			
			UI.getCurrent().addWindow(window);
		}
		
	}
	
	private class DeleteDatasourceButton extends Button implements Button.ClickListener {
		
		private Datasource datasource;
		
		public DeleteDatasourceButton(Datasource datasource) {
			this.datasource = datasource;
			
			setCaption("Delete");
			setStyleName("link");
			
			addClickListener(this);
		}

		@Override
		public void buttonClick(ClickEvent event) {
			datasources.removeItem(datasource);
		}
		
	}
	
	private class NewDatasourceHandler implements Button.ClickListener {
		
		@Override
		public void buttonClick(ClickEvent event) {
			final Window window = new Window("New Datasource");
			window.setWidth("80%");
			window.setHeight("80%");
			window.setModal(true);
			window.setResizable(false);
			window.setDraggable(false);
			
			Datasource datasource = new Datasource();
			datasource.getSchema().addOutput(new Output("output", "output", null));

			DatasourceEditor editor = new DatasourceEditor(datasource);
			editor.addSaveListener(new DatasourceEditor.SaveListener() {
				@Override
				public void save(DatasourceEditor.SaveEvent event) {
					if (event.getDatasource() != null) {
						datasources.addBean(event.getDatasource());
					}
					window.close();
				}
			});
			window.setContent(editor);
			
			UI.getCurrent().addWindow(window);
		}
		
	}
	
	public static class SaveEvent extends Event {
		
		private System system;

		public SaveEvent(Component source, System system) {
			super(source);
			
			this.system = system;
		}
		
		public System getSystem() {
			return system;
		}
		
	}
	
	public interface SaveListener extends Serializable {
		
		public void save(SaveEvent event);
		
	}

	public void addSaveListener(SaveListener listener) {
		addListener(SaveEvent.class, listener, ReflectTools.findMethod(SaveListener.class, "save", SaveEvent.class));
	}
	
	public void removeSaveListener(SaveListener listener) {
		removeListener(SaveEvent.class, listener, ReflectTools.findMethod(SaveListener.class, "save", SaveEvent.class));
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// name
		name = new TextField();
		name.setCaption("Name:");
		name.setImmediate(false);
		name.setWidth("500px");
		name.setHeight("-1px");
		name.setRequired(true);
		name.setInputPrompt("Name");
		mainLayout.addComponent(name);
		
		// description
		description = new TextArea();
		description.setCaption("Description:");
		description.setImmediate(false);
		description.setWidth("500px");
		description.setHeight("-1px");
		description.setInputPrompt("Description");
		mainLayout.addComponent(description);
		
		// project
		project = new ComboBox();
		project.setCaption("Project:");
		project.setImmediate(false);
		project.setWidth("500px");
		project.setHeight("-1px");
		mainLayout.addComponent(project);
		
		// tabSheet
		tabSheet = buildTabSheet();
		mainLayout.addComponent(tabSheet);
		mainLayout.setExpandRatio(tabSheet, 1.0f);
		
		// buttons
		buttons = buildButtons();
		mainLayout.addComponent(buttons);
		mainLayout.setComponentAlignment(buttons, new Alignment(6));
		
		return mainLayout;
	}

	@AutoGenerated
	private TabSheet buildTabSheet() {
		// common part: create layout
		tabSheet = new TabSheet();
		tabSheet.setStyleName("minimal");
		tabSheet.setCaption(" ");
		tabSheet.setImmediate(true);
		tabSheet.setWidth("100.0%");
		tabSheet.setHeight("100.0%");
		
		// datasourcesTab
		datasourcesTab = buildDatasourcesTab();
		tabSheet.addTab(datasourcesTab, "Datasources", null);
		
		// datasinksTab
		datasinksTab = buildDatasinksTab();
		tabSheet.addTab(datasinksTab, "Datasinks", null);
		
		// lookupsTab
		lookupsTab = buildLookupsTab();
		tabSheet.addTab(lookupsTab, "Lookups", null);
		
		return tabSheet;
	}

	@AutoGenerated
	private VerticalLayout buildDatasourcesTab() {
		// common part: create layout
		datasourcesTab = new VerticalLayout();
		datasourcesTab.setImmediate(false);
		datasourcesTab.setWidth("100.0%");
		datasourcesTab.setHeight("100.0%");
		datasourcesTab.setMargin(true);
		datasourcesTab.setSpacing(true);
		
		// datasourcesTable
		datasourcesTable = new Table();
		datasourcesTable.setImmediate(false);
		datasourcesTable.setWidth("100.0%");
		datasourcesTable.setHeight("100.0%");
		datasourcesTab.addComponent(datasourcesTable);
		datasourcesTab.setExpandRatio(datasourcesTable, 1.0f);
		
		// datasourcesButtons
		datasourcesButtons = buildDatasourcesButtons();
		datasourcesTab.addComponent(datasourcesButtons);
		
		return datasourcesTab;
	}

	@AutoGenerated
	private HorizontalLayout buildDatasourcesButtons() {
		// common part: create layout
		datasourcesButtons = new HorizontalLayout();
		datasourcesButtons.setImmediate(false);
		datasourcesButtons.setWidth("-1px");
		datasourcesButtons.setHeight("-1px");
		datasourcesButtons.setMargin(false);
		datasourcesButtons.setSpacing(true);
		
		// newDatasourceButton
		newDatasourceButton = new Button();
		newDatasourceButton.setStyleName("small");
		newDatasourceButton.setCaption("New Datasource...");
		newDatasourceButton.setImmediate(true);
		newDatasourceButton.setWidth("-1px");
		newDatasourceButton.setHeight("-1px");
		datasourcesButtons.addComponent(newDatasourceButton);
		
		return datasourcesButtons;
	}

	@AutoGenerated
	private VerticalLayout buildDatasinksTab() {
		// common part: create layout
		datasinksTab = new VerticalLayout();
		datasinksTab.setImmediate(false);
		datasinksTab.setWidth("100.0%");
		datasinksTab.setHeight("100.0%");
		datasinksTab.setMargin(true);
		datasinksTab.setSpacing(true);
		
		// datasinksTable
		datasinksTable = new Table();
		datasinksTable.setImmediate(false);
		datasinksTable.setWidth("100.0%");
		datasinksTable.setHeight("100.0%");
		datasinksTab.addComponent(datasinksTable);
		datasinksTab.setExpandRatio(datasinksTable, 1.0f);
		
		// datasinksButtons
		datasinksButtons = buildDatasinksButtons();
		datasinksTab.addComponent(datasinksButtons);
		
		return datasinksTab;
	}

	@AutoGenerated
	private HorizontalLayout buildDatasinksButtons() {
		// common part: create layout
		datasinksButtons = new HorizontalLayout();
		datasinksButtons.setImmediate(false);
		datasinksButtons.setWidth("-1px");
		datasinksButtons.setHeight("-1px");
		datasinksButtons.setMargin(false);
		datasinksButtons.setSpacing(true);
		
		// newDatasinkButton
		newDatasinkButton = new Button();
		newDatasinkButton.setStyleName("small");
		newDatasinkButton.setCaption("New Datasink...");
		newDatasinkButton.setImmediate(true);
		newDatasinkButton.setWidth("-1px");
		newDatasinkButton.setHeight("-1px");
		datasinksButtons.addComponent(newDatasinkButton);
		
		return datasinksButtons;
	}

	@AutoGenerated
	private VerticalLayout buildLookupsTab() {
		// common part: create layout
		lookupsTab = new VerticalLayout();
		lookupsTab.setImmediate(false);
		lookupsTab.setWidth("100.0%");
		lookupsTab.setHeight("100.0%");
		lookupsTab.setMargin(true);
		lookupsTab.setSpacing(true);
		
		// lookupsTable
		lookupsTable = new Table();
		lookupsTable.setImmediate(false);
		lookupsTable.setWidth("100.0%");
		lookupsTable.setHeight("100.0%");
		lookupsTab.addComponent(lookupsTable);
		lookupsTab.setExpandRatio(lookupsTable, 1.0f);
		
		// lookupsButtons
		lookupsButtons = buildLookupsButtons();
		lookupsTab.addComponent(lookupsButtons);
		
		return lookupsTab;
	}

	@AutoGenerated
	private HorizontalLayout buildLookupsButtons() {
		// common part: create layout
		lookupsButtons = new HorizontalLayout();
		lookupsButtons.setImmediate(false);
		lookupsButtons.setWidth("-1px");
		lookupsButtons.setHeight("-1px");
		lookupsButtons.setMargin(false);
		lookupsButtons.setSpacing(true);
		
		// newLookupButton
		newLookupButton = new Button();
		newLookupButton.setStyleName("small");
		newLookupButton.setCaption("New Lookup...");
		newLookupButton.setImmediate(true);
		newLookupButton.setWidth("-1px");
		newLookupButton.setHeight("-1px");
		lookupsButtons.addComponent(newLookupButton);
		
		return lookupsButtons;
	}

	@AutoGenerated
	private HorizontalLayout buildButtons() {
		// common part: create layout
		buttons = new HorizontalLayout();
		buttons.setImmediate(false);
		buttons.setWidth("-1px");
		buttons.setHeight("-1px");
		buttons.setMargin(false);
		buttons.setSpacing(true);
		
		// okButton
		okButton = new Button();
		okButton.setStyleName("primary");
		okButton.setCaption("OK");
		okButton.setImmediate(true);
		okButton.setWidth("-1px");
		okButton.setHeight("-1px");
		buttons.addComponent(okButton);
		
		// cancelButton
		cancelButton = new Button();
		cancelButton.setCaption("Cancel");
		cancelButton.setImmediate(true);
		cancelButton.setWidth("-1px");
		cancelButton.setHeight("-1px");
		buttons.addComponent(cancelButton);
		
		return buttons;
	}

}
