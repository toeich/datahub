package de.jworks.datahub.presentation.editors;

import java.io.Serializable;
import java.util.Arrays;
import java.util.List;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.data.fieldgroup.FieldGroup;
import com.vaadin.data.fieldgroup.FieldGroup.CommitException;
import com.vaadin.data.util.BeanItem;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DefaultFieldFactory;
import com.vaadin.ui.Field;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Notification;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;
import com.vaadin.util.ReflectTools;

import de.jworks.datahub.business.documents.entity.ColumnDefinition;
import de.jworks.datahub.business.documents.entity.Dataset;
import de.jworks.datahub.business.documents.entity.DatasetGroup;
import de.jworks.datahub.business.projects.entity.Project;

public class DocumentCollectionEditor extends CustomComponent {
	
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private HorizontalLayout buttons;
	@AutoGenerated
	private Button testButton;
	@AutoGenerated
	private Button cancelButton;
	@AutoGenerated
	private Button okButton;
	@AutoGenerated
	private TabSheet tabSheet;
	@AutoGenerated
	private VerticalLayout columns;
	@AutoGenerated
	private HorizontalLayout columnsButtons;
	@AutoGenerated
	private Button addColumnButton;
	@AutoGenerated
	private Table columnsTable;
	@AutoGenerated
	private VerticalLayout schema;
	@AutoGenerated
	private DocumentSchemaEditor schemaEditor;
	@AutoGenerated
	private ComboBox project;
	@AutoGenerated
	private TextArea description;
	@AutoGenerated
	private TextField name;
	
	
	private BeanItemContainer<ColumnDefinition> columnDefinitions = new BeanItemContainer<ColumnDefinition>(ColumnDefinition.class);

	
	public DocumentCollectionEditor(final DatasetGroup datasetGroup, List<Project> projects) {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// reset null representations
		name.setNullRepresentation(null);
		description.setNullRepresentation(null);
		
		// fill project combo box 
		project.setContainerDataSource(new BeanItemContainer<Project>(Project.class, projects));
		project.setItemCaptionPropertyId("name");

		schemaEditor.setDocumentSchema(datasetGroup.getSchema());
		
		
		columnDefinitions = new BeanItemContainer<ColumnDefinition>(ColumnDefinition.class, datasetGroup.getColumns());
		
		columnsTable.addGeneratedColumn("actions", new ColumnsActionsColumn());
		
		columnsTable.setContainerDataSource(columnDefinitions, Arrays.asList("name", "format", "actions"));
		columnsTable.setColumnExpandRatio("name", 1.0f);
		columnsTable.setColumnExpandRatio("format", 1.0f);
		
		columnsTable.setEditable(true);
		columnsTable.setTableFieldFactory(new DefaultFieldFactory() {
			@Override
			public Field<?> createField(Container container, Object itemId, Object propertyId, Component uiContext) {
				Field<?> field = super.createField(container, itemId, propertyId, uiContext);
				field.setSizeFull();
				return field;
			}
		});
		
		addColumnButton.addClickListener(new ClickListener() {
			@Override
			public void buttonClick(ClickEvent event) {
				columnDefinitions.addBean(new ColumnDefinition("name", "format"));
			}
		});
		
		
		final FieldGroup fieldGroup = new FieldGroup();
		fieldGroup.setItemDataSource(new BeanItem<DatasetGroup>(datasetGroup));
		fieldGroup.bindMemberFields(this);
		
		okButton.addClickListener(new ClickListener() {
			@Override
			public void buttonClick(ClickEvent event) {
				try {
					fieldGroup.commit();
					datasetGroup.setColumns(columnDefinitions.getItemIds());
					datasetGroup.updateData();
					fireEvent(new SaveEvent(DocumentCollectionEditor.this, datasetGroup));
				} catch (CommitException e) {
					Notification.show(e.getMessage(), Notification.Type.ERROR_MESSAGE);
				}
			}
		});
		
		cancelButton.addClickListener(new ClickListener() {
			@Override
			public void buttonClick(ClickEvent event) {
				fireEvent(new SaveEvent(DocumentCollectionEditor.this, null));
			}
		});
		
		testButton.addClickListener(new ClickListener() {
			@Override
			public void buttonClick(ClickEvent event) {
				final Window window = new Window(datasetGroup.getSchema().getRootElement().getLabel());
				window.setWidth("80%");
				window.setHeight("80%");
				window.setModal(true);
				window.setResizable(false);
				window.setDraggable(false);
				
				Dataset dataset = new Dataset();
				dataset.setContent("<" + datasetGroup.getSchema().getRootElement().getName() + "/>");
				dataset.setGroup(datasetGroup);
				
				DatasetEditor editor = new DatasetEditor(dataset);
				editor.addSaveListener(new DatasetEditor.SaveListener() {
					@Override
					public void save(DatasetEditor.SaveEvent event) {
						if (event.getDataset() != null) {
							System.out.println(event.getDataset());
						}
						window.close();
					}
				});
				window.setContent(editor);
				
				UI.getCurrent().addWindow(window);
			}
		});
	}
	
	private class ColumnsActionsColumn implements Table.ColumnGenerator {
		
		@Override
		public Object generateCell(Table source, Object itemId, Object columnId) {
			ColumnDefinition columnDefintion = columnDefinitions.getItem(itemId).getBean();
			HorizontalLayout actions = new HorizontalLayout();
			actions.setSpacing(true);
			actions.addComponent(new DeleteColumnButton(columnDefintion));
			return actions;
		}
		
	}
	
	private class DeleteColumnButton extends Button implements Button.ClickListener {
		
		private ColumnDefinition columnDefinition;
		
		public DeleteColumnButton(ColumnDefinition columnDefinition) {
			this.columnDefinition = columnDefinition;
			
			setCaption("delete");
			setStyleName("link");
			
			addClickListener(this);
		}

		@Override
		public void buttonClick(ClickEvent event) {
			columnDefinitions.removeItem(columnDefinition);
		}
		
	}

	public static class SaveEvent extends Event {
		
		private DatasetGroup collection;

		public SaveEvent(Component source, DatasetGroup collection) {
			super(source);
			
			this.collection = collection;
		}
		
		public DatasetGroup getCollection() {
			return collection;
		}
		
	}
	
	public interface SaveListener extends Serializable {
		
		public void save(SaveEvent event);
		
	}

	public void addSaveListener(SaveListener listener) {
		addListener(SaveEvent.class, listener, ReflectTools.findMethod(SaveListener.class, "save", SaveEvent.class));
	}
	
	public void removeSaveListener(SaveListener listener) {
		removeListener(SaveEvent.class, listener, ReflectTools.findMethod(SaveListener.class, "save", SaveEvent.class));
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// name
		name = new TextField();
		name.setCaption("Name:");
		name.setImmediate(false);
		name.setWidth("500px");
		name.setHeight("-1px");
		name.setInputPrompt("Name");
		mainLayout.addComponent(name);
		
		// description
		description = new TextArea();
		description.setCaption("Description:");
		description.setImmediate(false);
		description.setWidth("500px");
		description.setHeight("-1px");
		description.setInputPrompt("Description");
		mainLayout.addComponent(description);
		
		// project
		project = new ComboBox();
		project.setCaption("Project:");
		project.setImmediate(false);
		project.setWidth("500px");
		project.setHeight("-1px");
		mainLayout.addComponent(project);
		
		// tabSheet
		tabSheet = buildTabSheet();
		mainLayout.addComponent(tabSheet);
		mainLayout.setExpandRatio(tabSheet, 1.0f);
		
		// buttons
		buttons = buildButtons();
		mainLayout.addComponent(buttons);
		mainLayout.setComponentAlignment(buttons, new Alignment(6));
		
		return mainLayout;
	}

	@AutoGenerated
	private TabSheet buildTabSheet() {
		// common part: create layout
		tabSheet = new TabSheet();
		tabSheet.setStyleName("minimal");
		tabSheet.setCaption(" ");
		tabSheet.setImmediate(true);
		tabSheet.setWidth("100.0%");
		tabSheet.setHeight("100.0%");
		
		// schema
		schema = buildSchema();
		tabSheet.addTab(schema, "Schema", null);
		
		// columns
		columns = buildColumns();
		tabSheet.addTab(columns, "Columns", null);
		
		return tabSheet;
	}

	@AutoGenerated
	private VerticalLayout buildSchema() {
		// common part: create layout
		schema = new VerticalLayout();
		schema.setImmediate(false);
		schema.setWidth("100.0%");
		schema.setHeight("100.0%");
		schema.setMargin(true);
		
		// schemaEditor
		schemaEditor = new DocumentSchemaEditor();
		schemaEditor.setImmediate(false);
		schemaEditor.setWidth("100.0%");
		schemaEditor.setHeight("100.0%");
		schema.addComponent(schemaEditor);
		
		return schema;
	}

	@AutoGenerated
	private VerticalLayout buildColumns() {
		// common part: create layout
		columns = new VerticalLayout();
		columns.setImmediate(false);
		columns.setWidth("100.0%");
		columns.setHeight("100.0%");
		columns.setMargin(true);
		columns.setSpacing(true);
		
		// columnsTable
		columnsTable = new Table();
		columnsTable.setImmediate(false);
		columnsTable.setWidth("100.0%");
		columnsTable.setHeight("100.0%");
		columns.addComponent(columnsTable);
		columns.setExpandRatio(columnsTable, 1.0f);
		
		// columnsButtons
		columnsButtons = buildColumnsButtons();
		columns.addComponent(columnsButtons);
		
		return columns;
	}

	@AutoGenerated
	private HorizontalLayout buildColumnsButtons() {
		// common part: create layout
		columnsButtons = new HorizontalLayout();
		columnsButtons.setImmediate(false);
		columnsButtons.setWidth("-1px");
		columnsButtons.setHeight("-1px");
		columnsButtons.setMargin(false);
		columnsButtons.setSpacing(true);
		
		// addColumnButton
		addColumnButton = new Button();
		addColumnButton.setStyleName("small");
		addColumnButton.setCaption("Add Column");
		addColumnButton.setImmediate(true);
		addColumnButton.setWidth("-1px");
		addColumnButton.setHeight("-1px");
		columnsButtons.addComponent(addColumnButton);
		
		return columnsButtons;
	}

	@AutoGenerated
	private HorizontalLayout buildButtons() {
		// common part: create layout
		buttons = new HorizontalLayout();
		buttons.setImmediate(false);
		buttons.setWidth("-1px");
		buttons.setHeight("-1px");
		buttons.setMargin(false);
		buttons.setSpacing(true);
		
		// okButton
		okButton = new Button();
		okButton.setStyleName("primary");
		okButton.setCaption("OK");
		okButton.setImmediate(true);
		okButton.setWidth("-1px");
		okButton.setHeight("-1px");
		buttons.addComponent(okButton);
		
		// cancelButton
		cancelButton = new Button();
		cancelButton.setCaption("Cancel");
		cancelButton.setImmediate(true);
		cancelButton.setWidth("-1px");
		cancelButton.setHeight("-1px");
		buttons.addComponent(cancelButton);
		
		// testButton
		testButton = new Button();
		testButton.setStyleName("small");
		testButton.setCaption("Test");
		testButton.setImmediate(true);
		testButton.setWidth("-1px");
		testButton.setHeight("-1px");
		buttons.addComponent(testButton);
		buttons.setComponentAlignment(testButton, new Alignment(48));
		
		return buttons;
	}

}
