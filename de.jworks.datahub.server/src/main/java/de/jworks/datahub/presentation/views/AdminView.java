package de.jworks.datahub.presentation.views;

import javax.annotation.security.RolesAllowed;
import javax.inject.Inject;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.cdi.CDIView;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener;
import com.vaadin.server.Page;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.MenuBar;
import com.vaadin.ui.MenuBar.Command;
import com.vaadin.ui.MenuBar.MenuItem;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Panel;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;

import de.jworks.datahub.business.common.boundary.UserService;
import de.jworks.datahub.business.common.entity.Role;
import de.jworks.datahub.presentation.Constants;
import de.jworks.datahub.presentation.Messages;

@CDIView("admin")
@RolesAllowed({ Role.ADMIN })
public class AdminView extends CustomComponent implements View, Constants {
	
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	
	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private HorizontalLayout menuBars;
	@AutoGenerated
	private MenuBar menuBar_1;
	@AutoGenerated
	private MenuBar menuBar_2;
	@AutoGenerated
	private Panel panel;
	@AutoGenerated
	private VerticalLayout panelContent;
	
	@Inject
	UserService userService;
	@Inject
	AdminViewUsers usersComponent;
	@Inject
	AdminViewGroups groupsComponent;
	@Inject
	AdminViewProjects projectsComponent;
	@Inject
	AdminViewSystems systemsComponent;
	@Inject
	AdminViewCollections collectionsComponent;
	@Inject
	AdminViewTransformations transformationsComponent;
	
	private MenuItem userItem;
	
	public AdminView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		menuBar_1.setAutoOpen(true);
		menuBar_1.setHtmlContentAllowed(true);
		menuBar_1.addItem(USER_VIEW_CAPTION, new NavigateTo(USER_VIEW));
		menuBar_1.addItem(Messages.getString("users"), new NavigateTo(ADMIN_VIEW_USERS));
		menuBar_1.addItem(Messages.getString("groups"), new NavigateTo(ADMIN_VIEW_GROUPS));
		menuBar_1.addItem(Messages.getString("projects"), new NavigateTo(ADMIN_VIEW_PROJECTS));
		menuBar_1.addItem(Messages.getString("systems"), new NavigateTo(ADMIN_VIEW_SYSTEMS));
		menuBar_1.addItem(Messages.getString("collections"), new NavigateTo(ADMIN_VIEW_COLLECTIONS));
		menuBar_1.addItem(Messages.getString("transformations"), new NavigateTo(ADMIN_VIEW_TRANSFORMATIONS));
		menuBar_1.addItem(Messages.getString("actions"), new NavigateTo(ADMIN_VIEW_ACTIONS));

		menuBar_2.setAutoOpen(true);
		menuBar_2.setHtmlContentAllowed(true);
		menuBar_2.addItem(Messages.getString("search"), new Search());
		
		userItem = menuBar_2.addItem("", null);
		userItem.addItem("Edit Profile...", new EditProfile());
		userItem.addSeparator();
		userItem.addItem("Logout", new NavigateTo(LOGIN_VIEW));
	}

	@Override
	public void enter(ViewChangeListener.ViewChangeEvent event) {
		userItem.setText(String.format("%s â–¼", userService.getCurrentUser()));
		
		String[] parameters = event.getParameters().split("/");
		if (USERS.equals(parameters[0])) {
			Page.getCurrent().setTitle(TITLE_PREFIX + Messages.getString("users"));
			panel.setContent(usersComponent);
			usersComponent.refreshTable();
		} else if (GROUPS.equals(parameters[0])) {
			Page.getCurrent().setTitle(TITLE_PREFIX + Messages.getString("groups"));
			panel.setContent(groupsComponent);
			groupsComponent.refreshTable();
		} else if (PROJECTS.equals(parameters[0])) {
			Page.getCurrent().setTitle(TITLE_PREFIX + Messages.getString("projects"));
			panel.setContent(projectsComponent);
			projectsComponent.refreshTable();
		} else if (SYSTEMS.equals(parameters[0])) {
			Page.getCurrent().setTitle(TITLE_PREFIX + Messages.getString("systems"));
			panel.setContent(systemsComponent);
			systemsComponent.refreshTable();
		} else if (COLLECTIONS.equals(parameters[0])) {
			Page.getCurrent().setTitle(TITLE_PREFIX + Messages.getString("collections"));
			panel.setContent(collectionsComponent);
			collectionsComponent.refreshTable();
		} else if (TRANSFORMATIONS.equals(parameters[0])) {
			Page.getCurrent().setTitle(TITLE_PREFIX + Messages.getString("transformations"));
			panel.setContent(transformationsComponent);
			transformationsComponent.refreshTable();
		} else if (ACTIONS.equals(parameters[0])) {
			Page.getCurrent().setTitle(TITLE_PREFIX + Messages.getString("actions"));
			panel.setContent(panelContent);
		} else {
			UI.getCurrent().getNavigator().navigateTo(ADMIN_VIEW_USERS);
		}
	}

	public class NavigateTo implements Command {
		
		private String navigationState;
		
		public NavigateTo(String navigationState) {
			this.navigationState = navigationState;
		}

		@Override
		public void menuSelected(MenuItem selectedItem) {
			UI.getCurrent().getNavigator().navigateTo(navigationState);
		}
		
	}
	
	private class Search implements Command {

		@Override
		public void menuSelected(MenuItem selectedItem) {
			Window window = new Window("Search");
			window.setSizeFull();
			window.setModal(true);
			window.setDraggable(false);
			window.setResizable(false);
			UI.getCurrent().addWindow(window);
		}
		
	}
	
	public class EditProfile implements Command {
		
		@Override
		public void menuSelected(MenuItem selectedItem) {
			Notification.show("'Edit Profile...' selected");
		}
		
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// menuBars
		menuBars = buildMenuBars();
		mainLayout.addComponent(menuBars);
		
		// panel
		panel = buildPanel();
		mainLayout.addComponent(panel);
		mainLayout.setExpandRatio(panel, 1.0f);
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildMenuBars() {
		// common part: create layout
		menuBars = new HorizontalLayout();
		menuBars.setImmediate(false);
		menuBars.setWidth("100.0%");
		menuBars.setHeight("-1px");
		menuBars.setMargin(false);
		
		// menuBar_1
		menuBar_1 = new MenuBar();
		menuBar_1.setImmediate(false);
		menuBar_1.setWidth("100.0%");
		menuBar_1.setHeight("-1px");
		menuBars.addComponent(menuBar_1);
		menuBars.setExpandRatio(menuBar_1, 1.0f);
		
		// menuBar_2
		menuBar_2 = new MenuBar();
		menuBar_2.setImmediate(false);
		menuBar_2.setWidth("-1px");
		menuBar_2.setHeight("-1px");
		menuBars.addComponent(menuBar_2);
		
		return menuBars;
	}

	@AutoGenerated
	private Panel buildPanel() {
		// common part: create layout
		panel = new Panel();
		panel.setImmediate(false);
		panel.setWidth("100.0%");
		panel.setHeight("100.0%");
		
		// panelContent
		panelContent = new VerticalLayout();
		panelContent.setImmediate(false);
		panelContent.setWidth("100.0%");
		panelContent.setHeight("100.0%");
		panelContent.setMargin(false);
		panel.setContent(panelContent);
		
		return panel;
	}

}
