package de.jworks.datahub.presentation.editors;

import java.io.Serializable;
import java.util.List;

import javax.inject.Inject;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.fieldgroup.FieldGroup;
import com.vaadin.data.util.BeanItem;
import com.vaadin.event.Action;
import com.vaadin.event.DataBoundTransferable;
import com.vaadin.event.dd.DragAndDropEvent;
import com.vaadin.event.dd.DropHandler;
import com.vaadin.event.dd.acceptcriteria.AcceptCriterion;
import com.vaadin.event.dd.acceptcriteria.ServerSideCriterion;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Panel;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.Tree;
import com.vaadin.ui.Tree.TreeDragMode;
import com.vaadin.ui.Tree.TreeTargetDetails;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.util.ReflectTools;

import de.jworks.datahub.business.transform.entity.Datasource;
import de.jworks.datahub.business.transform.entity.Output;
import de.jworks.datahub.presentation.Messages;
import de.jworks.datahub.presentation.data.OutputContainer;

public class DatasourceEditor extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private HorizontalLayout buttons;
	@AutoGenerated
	private Button cancelButton;
	@AutoGenerated
	private Button okButton;
	@AutoGenerated
	private TabSheet tabSheet;
	@AutoGenerated
	private VerticalLayout camel;
	@AutoGenerated
	private TextArea routeSpec;
	@AutoGenerated
	private HorizontalLayout schema;
	@AutoGenerated
	private Panel detailsPanel;
	@AutoGenerated
	private VerticalLayout detailsLayout;
	@AutoGenerated
	private Panel masterPanel;
	@AutoGenerated
	private VerticalLayout masterLayout;
	@AutoGenerated
	private Tree schemaTree;
	@AutoGenerated
	private TextArea description;
	@AutoGenerated
	private TextField name;
	
//	@Inject
//	OutputEditor outputEditor;
	
	public DatasourceEditor(final Datasource datasource) {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		Messages.translate(this);
		
		schemaTree.setContainerDataSource(new OutputContainer(datasource.getSchema().getOutputs()));
		schemaTree.setItemCaptionPropertyId(OutputContainer.NAME);
		
		// context menu
		schemaTree.addActionHandler(new OutputActionHandler());
		
		// drag and drop
		schemaTree.setDragMode(TreeDragMode.NODE);
		schemaTree.setDropHandler(new OutputDropHandler());

		// master-details-view
		schemaTree.setImmediate(true);
		schemaTree.addValueChangeListener(new Property.ValueChangeListener() {
			@Override
			public void valueChange(Property.ValueChangeEvent event) {
				Object itemId = event.getProperty().getValue();
				if (itemId instanceof Output) {
					OutputEditor outputEditor = new OutputEditor((Output) itemId);
					outputEditor.addChangedListener(new OutputEditor.ChangedListener() {
						@Override
						public void changed(OutputEditor.ChangedEvent event) {
							schemaTree.markAsDirtyRecursive();
						}
					});
					detailsPanel.setContent(outputEditor);
				} else {
					detailsPanel.setContent(null);
				}
			}
		});

		List<Output> outputs = datasource.getSchema().getOutputs();
		for (Output output : outputs) {
			schemaTree.expandItemsRecursively(output);
		}
		
		schemaTree.setNullSelectionAllowed(false);
		if (outputs.size() > 0) {
			schemaTree.select(outputs.get(0));
		}
		
		final FieldGroup fieldGroup = new FieldGroup();
		fieldGroup.setItemDataSource(new BeanItem<Datasource>(datasource));
		fieldGroup.bindMemberFields(this);
		
		okButton.addClickListener(new Button.ClickListener() {
			@Override
			public void buttonClick(Button.ClickEvent event) {
				try {
					fieldGroup.commit();
					fireEvent(new SaveEvent(DatasourceEditor.this, datasource));
				} catch (FieldGroup.CommitException e) {
					Notification.show(e.getMessage(), Notification.Type.ERROR_MESSAGE);
				}
			}
		});
		
		cancelButton.addClickListener(new Button.ClickListener() {
			@Override
			public void buttonClick(Button.ClickEvent event) {
				fireEvent(new SaveEvent(DatasourceEditor.this, null));
			}
		});
	}

	private final class OutputActionHandler implements Action.Handler {
		
		private Action addOutput = new Action(Messages.getString(DatasourceEditor.this, "addOutput"));
		
		private Action delete = new Action(Messages.getString(DatasourceEditor.this, "delete"));

		@Override
		public Action[] getActions(Object target, Object sender) {
			if (target instanceof Output) {
				Output output = (Output) target;
				return output.getParent() == null ? new Action[] { addOutput } : new Action[] { addOutput, delete };
			}
			return new Action[0];
		}

		@Override
		public void handleAction(Action action, Object sender, Object target) {
			Tree tree = (Tree) sender;
			Output output = (Output) target;
			if (action == addOutput) {
				Output newOutput = new Output("output", "output", null);
				output.addOutput(newOutput);
				tree.expandItem(output);
				tree.select(newOutput);
			} else if (action == delete) {
				output.getParent().removeOutput(output);
				tree.markAsDirtyRecursive();
			}
		}
		
	}

	private final class OutputDropHandler implements DropHandler {
		
		@Override
		public AcceptCriterion getAcceptCriterion() {
			return new ServerSideCriterion() {
				@Override
				public boolean accept(DragAndDropEvent event) {
					try {
						DataBoundTransferable transferable = (DataBoundTransferable) event.getTransferable();
						TreeTargetDetails targetDetails = (TreeTargetDetails) event.getTargetDetails();
						
						if (targetDetails.getItemIdInto() == null) {
							return false;
						}
						
						if (targetDetails.getItemIdOver() == transferable.getItemId()) {
							return false;
						}
						
						if (transferable.getItemId() instanceof Output) {
							if (targetDetails.getItemIdOver() instanceof Output) {
								Output output = (Output) targetDetails.getItemIdOver();
								while (output != null) {
									if (output == transferable.getItemId()) {
										return false;
									}
									output = output.getParent();
								}
								return true;
							}
						}
					} catch (Exception e) {
						Notification.show("Error", e.getMessage(), Notification.Type.ERROR_MESSAGE);
					}
					
					return false;
				}
			};
		}

		@Override
		public void drop(DragAndDropEvent event) {
			try {
				DataBoundTransferable transferable = (DataBoundTransferable) event.getTransferable();
				TreeTargetDetails targetDetails = (TreeTargetDetails) event.getTargetDetails();
				
				Output output = (Output) transferable.getItemId();
				Output into = (Output) targetDetails.getItemIdInto();
				Output after = (Output) targetDetails.getItemIdAfter();

				into.addOutput(output, after);
				
				targetDetails.getTarget().markAsDirtyRecursive();
			} catch (Exception e) {
				Notification.show("Error", e.getMessage(), Notification.Type.ERROR_MESSAGE);
			}
		}
		
	}

	public static class SaveEvent extends Event {
		
		private Datasource datasource;

		public SaveEvent(Component source, Datasource datasource) {
			super(source);
			
			this.datasource = datasource;
		}
		
		public Datasource getDatasource() {
			return datasource;
		}
		
	}
	
	public interface SaveListener extends Serializable {
		
		public void save(SaveEvent event);
		
	}

	public void addSaveListener(SaveListener listener) {
		addListener(SaveEvent.class, listener, ReflectTools.findMethod(SaveListener.class, "save", SaveEvent.class));
	}
	
	public void removeSaveListener(SaveListener listener) {
		removeListener(SaveEvent.class, listener, ReflectTools.findMethod(SaveListener.class, "save", SaveEvent.class));
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// name
		name = new TextField();
		name.setCaption("Name:");
		name.setImmediate(false);
		name.setWidth("500px");
		name.setHeight("-1px");
		name.setRequired(true);
		mainLayout.addComponent(name);
		
		// description
		description = new TextArea();
		description.setCaption("Description:");
		description.setImmediate(false);
		description.setWidth("500px");
		description.setHeight("-1px");
		mainLayout.addComponent(description);
		
		// tabSheet
		tabSheet = buildTabSheet();
		mainLayout.addComponent(tabSheet);
		mainLayout.setExpandRatio(tabSheet, 1.0f);
		
		// buttons
		buttons = buildButtons();
		mainLayout.addComponent(buttons);
		mainLayout.setComponentAlignment(buttons, new Alignment(6));
		
		return mainLayout;
	}

	@AutoGenerated
	private TabSheet buildTabSheet() {
		// common part: create layout
		tabSheet = new TabSheet();
		tabSheet.setStyleName("minimal");
		tabSheet.setCaption(" ");
		tabSheet.setImmediate(true);
		tabSheet.setWidth("100.0%");
		tabSheet.setHeight("100.0%");
		
		// schema
		schema = buildSchema();
		tabSheet.addTab(schema, "Schema", null);
		
		// camel
		camel = buildCamel();
		tabSheet.addTab(camel, "Camel", null);
		
		return tabSheet;
	}

	@AutoGenerated
	private HorizontalLayout buildSchema() {
		// common part: create layout
		schema = new HorizontalLayout();
		schema.setCaption("Schema");
		schema.setImmediate(false);
		schema.setWidth("100.0%");
		schema.setHeight("100.0%");
		schema.setMargin(true);
		schema.setSpacing(true);
		
		// masterPanel
		masterPanel = buildMasterPanel();
		schema.addComponent(masterPanel);
		
		// detailsPanel
		detailsPanel = buildDetailsPanel();
		schema.addComponent(detailsPanel);
		schema.setExpandRatio(detailsPanel, 1.0f);
		
		return schema;
	}

	@AutoGenerated
	private Panel buildMasterPanel() {
		// common part: create layout
		masterPanel = new Panel();
		masterPanel.setImmediate(false);
		masterPanel.setWidth("300px");
		masterPanel.setHeight("100.0%");
		
		// masterLayout
		masterLayout = buildMasterLayout();
		masterPanel.setContent(masterLayout);
		
		return masterPanel;
	}

	@AutoGenerated
	private VerticalLayout buildMasterLayout() {
		// common part: create layout
		masterLayout = new VerticalLayout();
		masterLayout.setImmediate(false);
		masterLayout.setWidth("100.0%");
		masterLayout.setHeight("100.0%");
		masterLayout.setMargin(false);
		
		// schemaTree
		schemaTree = new Tree();
		schemaTree.setStyleName("borderless");
		schemaTree.setImmediate(false);
		schemaTree.setWidth("100.0%");
		schemaTree.setHeight("100.0%");
		masterLayout.addComponent(schemaTree);
		masterLayout.setExpandRatio(schemaTree, 1.0f);
		
		return masterLayout;
	}

	@AutoGenerated
	private Panel buildDetailsPanel() {
		// common part: create layout
		detailsPanel = new Panel();
		detailsPanel.setStyleName("light");
		detailsPanel.setImmediate(false);
		detailsPanel.setWidth("100.0%");
		detailsPanel.setHeight("100.0%");
		
		// detailsLayout
		detailsLayout = new VerticalLayout();
		detailsLayout.setImmediate(false);
		detailsLayout.setWidth("100.0%");
		detailsLayout.setHeight("100.0%");
		detailsLayout.setMargin(false);
		detailsPanel.setContent(detailsLayout);
		
		return detailsPanel;
	}

	@AutoGenerated
	private VerticalLayout buildCamel() {
		// common part: create layout
		camel = new VerticalLayout();
		camel.setImmediate(false);
		camel.setWidth("100.0%");
		camel.setHeight("100.0%");
		camel.setMargin(true);
		
		// routeSpec
		routeSpec = new TextArea();
		routeSpec.setCaption("Route Spec:");
		routeSpec.setImmediate(false);
		routeSpec.setWidth("100.0%");
		routeSpec.setHeight("100.0%");
		camel.addComponent(routeSpec);
		
		return camel;
	}

	@AutoGenerated
	private HorizontalLayout buildButtons() {
		// common part: create layout
		buttons = new HorizontalLayout();
		buttons.setImmediate(false);
		buttons.setWidth("-1px");
		buttons.setHeight("-1px");
		buttons.setMargin(false);
		buttons.setSpacing(true);
		
		// okButton
		okButton = new Button();
		okButton.setStyleName("primary");
		okButton.setCaption("OK");
		okButton.setImmediate(true);
		okButton.setWidth("-1px");
		okButton.setHeight("-1px");
		buttons.addComponent(okButton);
		
		// cancelButton
		cancelButton = new Button();
		cancelButton.setCaption("Cancel");
		cancelButton.setImmediate(true);
		cancelButton.setWidth("-1px");
		cancelButton.setHeight("-1px");
		buttons.addComponent(cancelButton);
		
		return buttons;
	}

}
