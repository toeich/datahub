package de.jworks.datahub.presentation.editors;

import java.io.Serializable;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.fieldgroup.FieldGroup;
import com.vaadin.data.fieldgroup.FieldGroup.CommitException;
import com.vaadin.data.util.BeanItem;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.OptionGroup;
import com.vaadin.ui.PasswordField;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.util.ReflectTools;

import de.jworks.datahub.business.common.entity.User;
import de.jworks.datahub.presentation.data.Datasources;

public class UserEditor extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private HorizontalLayout buttons;
	@AutoGenerated
	private Button cancelButton;
	@AutoGenerated
	private Button okButton;
	@AutoGenerated
	private OptionGroup roles;
	@AutoGenerated
	private PasswordField password;
	@AutoGenerated
	private TextField email;
	@AutoGenerated
	private HorizontalLayout name;
	@AutoGenerated
	private TextField lastName;
	@AutoGenerated
	private TextField firstName;
	@AutoGenerated
	private TextField id;
	public UserEditor(final User user) {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		id.setNullRepresentation(null);
		firstName.setNullRepresentation(null);
		lastName.setNullRepresentation(null);
		email.setNullRepresentation(null);
		password.setNullRepresentation(null);
		
		roles.setMultiSelect(true);
		roles.setContainerDataSource(Datasources.getRoles());
		
		final FieldGroup fieldGroup = new FieldGroup();
		fieldGroup.setItemDataSource(new BeanItem<User>(user));
		fieldGroup.bindMemberFields(this);
		
		id.setVisible(user.getId() == null);
		
		okButton.addClickListener(new ClickListener() {
			@Override
			public void buttonClick(ClickEvent event) {
				try {
					fieldGroup.commit();
					fireEvent(new SaveEvent(UserEditor.this, user));
				} catch (CommitException e) {
					e.printStackTrace();
				}
			}
		});
		cancelButton.addClickListener(new ClickListener() {
			@Override
			public void buttonClick(ClickEvent event) {
				fieldGroup.discard();
				fireEvent(new SaveEvent(UserEditor.this, null));
			}
		});
	}

	public static class SaveEvent extends Event {
		
		private User user;

		public SaveEvent(Component source, User user) {
			super(source);
			
			this.user = user;
		}
		
		public User getUser() {
			return user;
		}
		
	}
	
	public interface SaveListener extends Serializable {
		
		public void save(SaveEvent event);
		
	}

	public void addSaveListener(SaveListener listener) {
		addListener(SaveEvent.class, listener, ReflectTools.findMethod(SaveListener.class, "save", SaveEvent.class));
	}
	
	public void removeSaveListener(SaveListener listener) {
		removeListener(SaveEvent.class, listener, ReflectTools.findMethod(SaveListener.class, "save", SaveEvent.class));
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("500px");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("500px");
		setHeight("-1px");
		
		// id
		id = new TextField();
		id.setCaption("User ID:");
		id.setImmediate(false);
		id.setWidth("100.0%");
		id.setHeight("-1px");
		id.setRequired(true);
		id.setNullSettingAllowed(true);
		mainLayout.addComponent(id);
		
		// name
		name = buildName();
		mainLayout.addComponent(name);
		
		// email
		email = new TextField();
		email.setCaption("Email");
		email.setImmediate(false);
		email.setWidth("100.0%");
		email.setHeight("-1px");
		email.setRequired(true);
		mainLayout.addComponent(email);
		
		// password
		password = new PasswordField();
		password.setCaption("Password:");
		password.setImmediate(false);
		password.setWidth("100.0%");
		password.setHeight("-1px");
		password.setRequired(true);
		mainLayout.addComponent(password);
		
		// roles
		roles = new OptionGroup();
		roles.setCaption("Roles");
		roles.setImmediate(false);
		roles.setWidth("100.0%");
		roles.setHeight("-1px");
		mainLayout.addComponent(roles);
		
		// buttons
		buttons = buildButtons();
		mainLayout.addComponent(buttons);
		mainLayout.setComponentAlignment(buttons, new Alignment(10));
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildName() {
		// common part: create layout
		name = new HorizontalLayout();
		name.setImmediate(false);
		name.setWidth("100.0%");
		name.setHeight("-1px");
		name.setMargin(false);
		name.setSpacing(true);
		
		// firstName
		firstName = new TextField();
		firstName.setCaption("First Name:");
		firstName.setImmediate(false);
		firstName.setWidth("100.0%");
		firstName.setHeight("-1px");
		firstName.setRequired(true);
		name.addComponent(firstName);
		name.setExpandRatio(firstName, 1.0f);
		
		// lastName
		lastName = new TextField();
		lastName.setCaption("Last Name:");
		lastName.setImmediate(false);
		lastName.setWidth("100.0%");
		lastName.setHeight("-1px");
		lastName.setRequired(true);
		name.addComponent(lastName);
		name.setExpandRatio(lastName, 1.0f);
		
		return name;
	}

	@AutoGenerated
	private HorizontalLayout buildButtons() {
		// common part: create layout
		buttons = new HorizontalLayout();
		buttons.setImmediate(false);
		buttons.setWidth("-1px");
		buttons.setHeight("-1px");
		buttons.setMargin(false);
		buttons.setSpacing(true);
		
		// okButton
		okButton = new Button();
		okButton.setStyleName("primary");
		okButton.setCaption("OK");
		okButton.setImmediate(true);
		okButton.setWidth("-1px");
		okButton.setHeight("-1px");
		buttons.addComponent(okButton);
		
		// cancelButton
		cancelButton = new Button();
		cancelButton.setCaption("Cancel");
		cancelButton.setImmediate(true);
		cancelButton.setWidth("-1px");
		cancelButton.setHeight("-1px");
		buttons.addComponent(cancelButton);
		
		return buttons;
	}
	
}
